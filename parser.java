
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\251\000\002\002\004\000\002\002\003\000\002\004" +
    "\005\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\042\003\000\002\042" +
    "\003\000\002\006\004\000\002\006\004\000\002\006\007" +
    "\000\002\006\007\000\002\006\004\000\002\006\004\000" +
    "\002\007\005\000\002\007\010\000\002\010\003\000\002" +
    "\010\003\000\002\012\007\000\002\014\007\000\002\014" +
    "\005\000\002\014\003\000\002\014\004\000\002\014\004" +
    "\000\002\013\007\000\002\015\007\000\002\015\006\000" +
    "\002\015\006\000\002\015\005\000\002\015\004\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\037" +
    "\013\000\002\037\015\000\002\040\007\000\002\041\007" +
    "\000\002\016\004\000\002\016\004\000\002\017\007\000" +
    "\002\025\006\000\002\025\005\000\002\025\006\000\002" +
    "\025\005\000\002\025\003\000\002\025\004\000\002\025" +
    "\004\000\002\020\004\000\002\020\003\000\002\022\004" +
    "\000\002\022\006\000\002\022\006\000\002\022\010\000" +
    "\002\023\006\000\002\023\010\000\002\023\004\000\002" +
    "\023\004\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\027\010\000\002\027\006\000\002\027\005" +
    "\000\002\030\006\000\002\030\005\000\002\031\003\000" +
    "\002\021\005\000\002\021\003\000\002\021\004\000\002" +
    "\021\004\000\002\024\005\000\002\024\003\000\002\032" +
    "\004\000\002\032\006\000\002\032\004\000\002\032\006" +
    "\000\002\033\006\000\002\034\004\000\002\034\004\000" +
    "\002\035\005\000\002\035\005\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\004\000\002\036" +
    "\006\000\002\036\006\000\002\036\004\000\002\036\006" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\043\005\000\002\043\005\000\002" +
    "\043\004\000\002\043\005\000\002\043\003\000\002\043" +
    "\003\000\002\043\006\000\002\043\003\000\002\043\003" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\043\004\000\002\043\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\043" +
    "\004\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\050\003\000\002\050\003\000\002" +
    "\054\003\000\002\054\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\053\003\000\002\053\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\072\004\032\011\027\015\017\021\047\023" +
    "\015\025\014\026\041\027\046\030\066\031\057\032\022" +
    "\033\037\035\053\036\067\037\036\040\024\041\062\042" +
    "\065\043\070\044\056\045\013\046\026\110\052\111\050" +
    "\112\035\113\064\114\044\115\045\001\002\000\004\002" +
    "\u012c\001\002\000\006\114\uffec\115\uffec\001\002\000\006" +
    "\114\uffb1\115\uffb1\001\002\000\006\114\ufff3\115\ufff3\001" +
    "\002\000\006\114\uffea\115\uffea\001\002\000\006\114\uffcc" +
    "\115\uffcc\001\002\000\006\114\ufff5\115\ufff5\001\002\000" +
    "\014\003\256\107\u0127\110\052\111\050\112\035\001\002" +
    "\000\006\114\uffe7\115\uffe7\001\002\000\006\114\044\115" +
    "\045\001\002\000\006\114\ufff1\115\ufff1\001\002\000\010" +
    "\110\052\111\050\112\035\001\002\000\006\114\uffed\115" +
    "\uffed\001\002\000\004\002\000\001\002\000\004\107\u0108" +
    "\001\002\000\006\114\ufff0\115\ufff0\001\002\000\010\110" +
    "\052\111\050\112\035\001\002\000\006\114\uffdb\115\uffdb" +
    "\001\002\000\004\107\u0102\001\002\000\036\003\117\032" +
    "\075\047\101\050\110\051\102\066\100\072\111\102\077" +
    "\105\105\106\076\107\103\110\052\111\050\112\035\001" +
    "\002\000\006\114\ufff4\115\ufff4\001\002\000\006\114\044" +
    "\115\045\001\002\000\036\003\117\032\075\047\101\050" +
    "\110\051\102\066\100\072\111\102\077\105\105\106\076" +
    "\107\103\110\052\111\050\112\035\001\002\000\006\114" +
    "\uffcd\115\uffcd\001\002\000\006\114\ufff2\115\ufff2\001\002" +
    "\000\126\003\uff5b\005\uff5b\032\uff5b\034\uff5b\047\uff5b\050" +
    "\uff5b\051\uff5b\052\uff5b\053\uff5b\054\uff5b\055\uff5b\056\uff5b" +
    "\057\uff5b\060\uff5b\061\uff5b\062\uff5b\063\uff5b\064\uff5b\065" +
    "\uff5b\066\uff5b\067\uff5b\070\uff5b\071\uff5b\072\uff5b\073\uff5b" +
    "\074\uff5b\075\uff5b\076\uff5b\077\uff5b\100\uff5b\101\uff5b\102" +
    "\uff5b\103\uff5b\104\uff5b\105\uff5b\106\uff5b\107\uff5b\110\uff5b" +
    "\111\uff5b\112\uff5b\114\uff5b\115\uff5b\001\002\000\010\110" +
    "\052\111\050\112\035\001\002\000\042\003\117\032\075" +
    "\047\101\050\110\051\102\066\100\072\111\102\077\105" +
    "\105\106\076\107\103\110\052\111\050\112\035\114\uffbc" +
    "\115\uffbc\001\002\000\072\004\032\011\027\015\017\021" +
    "\047\023\015\025\014\026\041\027\046\030\066\031\057" +
    "\032\022\033\037\035\053\036\067\037\036\040\024\041" +
    "\062\042\065\043\070\044\056\045\013\046\026\110\052" +
    "\111\050\112\035\113\064\114\044\115\045\001\002\000" +
    "\006\114\uffe8\115\uffe8\001\002\000\006\114\uffee\115\uffee" +
    "\001\002\000\050\003\117\032\075\034\322\047\101\050" +
    "\110\051\320\053\317\057\227\066\100\072\111\102\077" +
    "\105\105\106\076\107\103\110\052\111\050\112\035\114" +
    "\uffab\115\uffab\001\002\000\202\002\uffe6\003\uffe6\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\052" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\060\uffe6\061\uffe6\062\uffe6" +
    "\063\uffe6\064\uffe6\065\uffe6\067\uffe6\070\uffe6\071\uffe6\072" +
    "\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6" +
    "\101\uffe6\103\uffe6\104\uffe6\110\uffe6\111\uffe6\112\uffe6\113" +
    "\uffe6\114\uffe6\115\uffe6\001\002\000\202\002\uffe5\003\uffe5" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\052\uffe5\054\uffe5\055\uffe5\056\uffe5\060\uffe5\061\uffe5" +
    "\062\uffe5\063\uffe5\064\uffe5\065\uffe5\067\uffe5\070\uffe5\071" +
    "\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5" +
    "\100\uffe5\101\uffe5\103\uffe5\104\uffe5\110\uffe5\111\uffe5\112" +
    "\uffe5\113\uffe5\114\uffe5\115\uffe5\001\002\000\004\113\316" +
    "\001\002\000\036\003\117\032\075\047\101\050\110\051" +
    "\102\066\100\072\111\102\077\105\105\106\076\107\103" +
    "\110\052\111\050\112\035\001\002\000\126\003\uff5a\005" +
    "\uff5a\032\uff5a\034\uff5a\047\uff5a\050\uff5a\051\uff5a\052\uff5a" +
    "\053\uff5a\054\uff5a\055\uff5a\056\uff5a\057\uff5a\060\uff5a\061" +
    "\uff5a\062\uff5a\063\uff5a\064\uff5a\065\uff5a\066\uff5a\067\uff5a" +
    "\070\uff5a\071\uff5a\072\uff5a\073\uff5a\074\uff5a\075\uff5a\076" +
    "\uff5a\077\uff5a\100\uff5a\101\uff5a\102\uff5a\103\uff5a\104\uff5a" +
    "\105\uff5a\106\uff5a\107\uff5a\110\uff5a\111\uff5a\112\uff5a\114" +
    "\uff5a\115\uff5a\001\002\000\006\114\uffb2\115\uffb2\001\002" +
    "\000\126\003\uff59\005\uff59\032\uff59\034\uff59\047\uff59\050" +
    "\uff59\051\uff59\052\uff59\053\uff59\054\uff59\055\uff59\056\uff59" +
    "\057\uff59\060\uff59\061\uff59\062\uff59\063\uff59\064\uff59\065" +
    "\uff59\066\uff59\067\uff59\070\uff59\071\uff59\072\uff59\073\uff59" +
    "\074\uff59\075\uff59\076\uff59\077\uff59\100\uff59\101\uff59\102" +
    "\uff59\103\uff59\104\uff59\105\uff59\106\uff59\107\uff59\110\uff59" +
    "\111\uff59\112\uff59\114\uff59\115\uff59\001\002\000\006\114" +
    "\044\115\045\001\002\000\006\114\uffb3\115\uffb3\001\002" +
    "\000\006\114\uffce\115\uffce\001\002\000\042\003\112\032" +
    "\075\047\101\050\110\051\102\055\104\056\072\066\100" +
    "\072\111\102\077\105\105\106\076\107\103\110\052\111" +
    "\050\112\035\001\002\000\010\110\052\111\050\112\035" +
    "\001\002\000\006\114\uffef\115\uffef\001\002\000\006\114" +
    "\uffdc\115\uffdc\001\002\000\010\110\052\111\050\112\035" +
    "\001\002\000\006\114\ufff6\115\ufff6\001\002\000\006\114" +
    "\uffe9\115\uffe9\001\002\000\010\110\052\111\050\112\035" +
    "\001\002\000\004\113\236\001\002\000\010\110\052\111" +
    "\050\112\035\001\002\000\042\003\112\032\075\047\101" +
    "\050\110\051\102\055\104\056\072\066\100\072\111\102" +
    "\077\105\105\106\076\107\103\110\052\111\050\112\035" +
    "\001\002\000\006\114\uffeb\115\uffeb\001\002\000\006\114" +
    "\uff99\115\uff99\001\002\000\070\005\uff87\034\uff87\052\uff87" +
    "\054\uff87\055\uff87\056\uff87\060\uff87\061\uff87\062\uff87\063" +
    "\uff87\064\uff87\065\uff87\067\uff87\070\uff87\071\uff87\072\uff87" +
    "\073\uff87\074\uff87\075\uff87\076\uff87\077\uff87\100\uff87\101" +
    "\uff87\103\uff87\104\uff87\114\uff87\115\uff87\001\002\000\060" +
    "\055\222\056\221\060\155\061\125\062\124\063\142\064" +
    "\135\065\153\067\144\070\133\071\126\072\151\073\143" +
    "\074\147\075\121\076\130\077\123\100\150\101\154\103" +
    "\140\104\132\114\uff9b\115\uff9b\001\002\000\004\051\213" +
    "\001\002\000\070\005\uff65\034\uff65\052\uff65\054\uff65\055" +
    "\uff65\056\uff65\060\uff65\061\uff65\062\uff65\063\uff65\064\uff65" +
    "\065\uff65\067\uff65\070\uff65\071\uff65\072\uff65\073\uff65\074" +
    "\uff65\075\uff65\076\uff65\077\uff65\100\uff65\101\uff65\103\uff65" +
    "\104\uff65\114\uff65\115\uff65\001\002\000\036\003\uff7a\032" +
    "\uff7a\047\uff7a\050\uff7a\051\uff7a\066\uff7a\072\uff7a\102\uff7a" +
    "\105\uff7a\106\uff7a\107\uff7a\110\uff7a\111\uff7a\112\uff7a\001" +
    "\002\000\036\003\uff7b\032\uff7b\047\uff7b\050\uff7b\051\uff7b" +
    "\066\uff7b\072\uff7b\102\uff7b\105\uff7b\106\uff7b\107\uff7b\110" +
    "\uff7b\111\uff7b\112\uff7b\001\002\000\070\005\uff63\034\uff63" +
    "\052\uff63\054\uff63\055\uff63\056\uff63\060\uff63\061\uff63\062" +
    "\uff63\063\uff63\064\uff63\065\uff63\067\uff63\070\uff63\071\uff63" +
    "\072\uff63\073\uff63\074\uff63\075\uff63\076\uff63\077\uff63\100" +
    "\uff63\101\uff63\103\uff63\104\uff63\114\uff63\115\uff63\001\002" +
    "\000\036\003\117\032\075\047\101\050\110\051\102\066" +
    "\100\072\111\102\077\105\105\106\076\107\103\110\052" +
    "\111\050\112\035\001\002\000\070\005\uff64\034\uff64\052" +
    "\uff64\054\uff64\055\uff64\056\uff64\060\uff64\061\uff64\062\uff64" +
    "\063\uff64\064\uff64\065\uff64\067\uff64\070\uff64\071\uff64\072" +
    "\uff64\073\uff64\074\uff64\075\uff64\076\uff64\077\uff64\100\uff64" +
    "\101\uff64\103\uff64\104\uff64\114\uff64\115\uff64\001\002\000" +
    "\006\114\uff9a\115\uff9a\001\002\000\070\005\uff66\034\uff66" +
    "\052\uff66\054\uff66\055\uff66\056\uff66\060\uff66\061\uff66\062" +
    "\uff66\063\uff66\064\uff66\065\uff66\067\uff66\070\uff66\071\uff66" +
    "\072\uff66\073\uff66\074\uff66\075\uff66\076\uff66\077\uff66\100" +
    "\uff66\101\uff66\103\uff66\104\uff66\114\uff66\115\uff66\001\002" +
    "\000\074\005\uff8a\034\uff8a\051\175\052\uff8a\053\174\054" +
    "\uff8a\055\uff8a\056\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a" +
    "\064\uff8a\065\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073" +
    "\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a\100\uff8a\101\uff8a" +
    "\103\uff8a\104\uff8a\114\uff8a\115\uff8a\001\002\000\006\114" +
    "\uff9f\115\uff9f\001\002\000\070\005\uff62\034\uff62\052\uff62" +
    "\054\uff62\055\uff62\056\uff62\060\uff62\061\uff62\062\uff62\063" +
    "\uff62\064\uff62\065\uff62\067\uff62\070\uff62\071\uff62\072\uff62" +
    "\073\uff62\074\uff62\075\uff62\076\uff62\077\uff62\100\uff62\101" +
    "\uff62\103\uff62\104\uff62\114\uff62\115\uff62\001\002\000\036" +
    "\003\uff7c\032\uff7c\047\uff7c\050\uff7c\051\uff7c\066\uff7c\072" +
    "\uff7c\102\uff7c\105\uff7c\106\uff7c\107\uff7c\110\uff7c\111\uff7c" +
    "\112\uff7c\001\002\000\070\051\136\052\127\053\131\054" +
    "\120\055\141\056\173\060\155\061\125\062\124\063\142" +
    "\064\135\065\153\067\144\070\133\071\126\072\151\073" +
    "\143\074\147\075\121\076\130\077\123\100\150\101\154" +
    "\103\140\104\132\114\044\115\045\001\002\000\070\005" +
    "\uff8b\034\uff8b\052\uff8b\054\uff8b\055\uff8b\056\uff8b\060\uff8b" +
    "\061\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b\067\uff8b\070" +
    "\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b" +
    "\077\uff8b\100\uff8b\101\uff8b\103\uff8b\104\uff8b\114\uff8b\115" +
    "\uff8b\001\002\000\070\005\uff88\034\uff88\052\uff88\054\uff88" +
    "\055\uff88\056\uff88\060\uff88\061\uff88\062\uff88\063\uff88\064" +
    "\uff88\065\uff88\067\uff88\070\uff88\071\uff88\072\uff88\073\uff88" +
    "\074\uff88\075\uff88\076\uff88\077\uff88\100\uff88\101\uff88\103" +
    "\uff88\104\uff88\114\uff88\115\uff88\001\002\000\036\003\117" +
    "\032\075\047\101\050\110\051\102\066\100\072\111\102" +
    "\077\105\105\106\076\107\103\110\052\111\050\112\035" +
    "\001\002\000\070\005\uff8d\034\uff8d\052\uff8d\054\uff8d\055" +
    "\uff8d\056\uff8d\060\155\061\125\062\124\063\142\064\135" +
    "\065\153\067\144\070\133\071\126\072\151\073\143\074" +
    "\147\075\121\076\130\077\123\100\150\101\154\103\140" +
    "\104\132\114\uff8d\115\uff8d\001\002\000\066\051\136\052" +
    "\127\053\131\054\120\055\141\060\155\061\125\062\124" +
    "\063\142\064\135\065\153\067\144\070\133\071\126\072" +
    "\151\073\143\074\147\075\121\076\130\077\123\100\150" +
    "\101\154\103\140\104\132\114\044\115\045\001\002\000" +
    "\070\005\uff7d\034\uff7d\052\uff7d\054\uff7d\055\uff7d\056\uff7d" +
    "\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\067" +
    "\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\075\uff7d" +
    "\076\uff7d\077\uff7d\100\uff7d\101\uff7d\103\uff7d\104\uff7d\114" +
    "\uff7d\115\uff7d\001\002\000\122\003\uff77\005\uff77\032\uff77" +
    "\034\uff77\047\uff77\050\uff77\051\uff77\052\uff77\054\uff77\055" +
    "\uff77\056\uff77\060\uff77\061\uff77\062\uff77\063\uff77\064\uff77" +
    "\065\uff77\066\uff77\067\uff77\070\uff77\071\uff77\072\uff77\073" +
    "\uff77\074\uff77\075\uff77\076\uff77\077\uff77\100\uff77\101\uff77" +
    "\102\uff77\103\uff77\104\uff77\105\uff77\106\uff77\107\uff77\110" +
    "\uff77\111\uff77\112\uff77\114\uff77\115\uff77\001\002\000\070" +
    "\005\uff84\034\uff84\052\uff84\054\uff84\055\uff84\056\uff84\060" +
    "\uff84\061\uff84\062\uff84\063\uff84\064\uff84\065\uff84\067\uff84" +
    "\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84\075\uff84\076" +
    "\uff84\077\uff84\100\uff84\101\uff84\103\uff84\104\uff84\114\uff84" +
    "\115\uff84\001\002\000\122\003\uff6b\005\uff6b\032\uff6b\034" +
    "\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\054\uff6b\055\uff6b" +
    "\056\uff6b\060\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b\065" +
    "\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b\072\uff6b\073\uff6b" +
    "\074\uff6b\075\uff6b\076\uff6b\077\uff6b\100\uff6b\101\uff6b\102" +
    "\uff6b\103\uff6b\104\uff6b\105\uff6b\106\uff6b\107\uff6b\110\uff6b" +
    "\111\uff6b\112\uff6b\114\uff6b\115\uff6b\001\002\000\122\003" +
    "\uff6f\005\uff6f\032\uff6f\034\uff6f\047\uff6f\050\uff6f\051\uff6f" +
    "\052\uff6f\054\uff6f\055\uff6f\056\uff6f\060\uff6f\061\uff6f\062" +
    "\uff6f\063\uff6f\064\uff6f\065\uff6f\066\uff6f\067\uff6f\070\uff6f" +
    "\071\uff6f\072\uff6f\073\uff6f\074\uff6f\075\uff6f\076\uff6f\077" +
    "\uff6f\100\uff6f\101\uff6f\102\uff6f\103\uff6f\104\uff6f\105\uff6f" +
    "\106\uff6f\107\uff6f\110\uff6f\111\uff6f\112\uff6f\114\uff6f\115" +
    "\uff6f\001\002\000\122\003\uff70\005\uff70\032\uff70\034\uff70" +
    "\047\uff70\050\uff70\051\uff70\052\uff70\054\uff70\055\uff70\056" +
    "\uff70\060\uff70\061\uff70\062\uff70\063\uff70\064\uff70\065\uff70" +
    "\066\uff70\067\uff70\070\uff70\071\uff70\072\uff70\073\uff70\074" +
    "\uff70\075\uff70\076\uff70\077\uff70\100\uff70\101\uff70\102\uff70" +
    "\103\uff70\104\uff70\105\uff70\106\uff70\107\uff70\110\uff70\111" +
    "\uff70\112\uff70\114\uff70\115\uff70\001\002\000\122\003\uff75" +
    "\005\uff75\032\uff75\034\uff75\047\uff75\050\uff75\051\uff75\052" +
    "\uff75\054\uff75\055\uff75\056\uff75\060\uff75\061\uff75\062\uff75" +
    "\063\uff75\064\uff75\065\uff75\066\uff75\067\uff75\070\uff75\071" +
    "\uff75\072\uff75\073\uff75\074\uff75\075\uff75\076\uff75\077\uff75" +
    "\100\uff75\101\uff75\102\uff75\103\uff75\104\uff75\105\uff75\106" +
    "\uff75\107\uff75\110\uff75\111\uff75\112\uff75\114\uff75\115\uff75" +
    "\001\002\000\070\005\uff7f\034\uff7f\052\uff7f\054\uff7f\055" +
    "\uff7f\056\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f" +
    "\065\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074" +
    "\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f\101\uff7f\103\uff7f" +
    "\104\uff7f\114\uff7f\115\uff7f\001\002\000\122\003\uff76\005" +
    "\uff76\032\uff76\034\uff76\047\uff76\050\uff76\051\uff76\052\uff76" +
    "\054\uff76\055\uff76\056\uff76\060\uff76\061\uff76\062\uff76\063" +
    "\uff76\064\uff76\065\uff76\066\uff76\067\uff76\070\uff76\071\uff76" +
    "\072\uff76\073\uff76\074\uff76\075\uff76\076\uff76\077\uff76\100" +
    "\uff76\101\uff76\102\uff76\103\uff76\104\uff76\105\uff76\106\uff76" +
    "\107\uff76\110\uff76\111\uff76\112\uff76\114\uff76\115\uff76\001" +
    "\002\000\070\005\uff7e\034\uff7e\052\uff7e\054\uff7e\055\uff7e" +
    "\056\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\065" +
    "\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e" +
    "\075\uff7e\076\uff7e\077\uff7e\100\uff7e\101\uff7e\103\uff7e\104" +
    "\uff7e\114\uff7e\115\uff7e\001\002\000\122\003\uff72\005\uff72" +
    "\032\uff72\034\uff72\047\uff72\050\uff72\051\uff72\052\uff72\054" +
    "\uff72\055\uff72\056\uff72\060\uff72\061\uff72\062\uff72\063\uff72" +
    "\064\uff72\065\uff72\066\uff72\067\uff72\070\uff72\071\uff72\072" +
    "\uff72\073\uff72\074\uff72\075\uff72\076\uff72\077\uff72\100\uff72" +
    "\101\uff72\102\uff72\103\uff72\104\uff72\105\uff72\106\uff72\107" +
    "\uff72\110\uff72\111\uff72\112\uff72\114\uff72\115\uff72\001\002" +
    "\000\122\003\uff67\005\uff67\032\uff67\034\uff67\047\uff67\050" +
    "\uff67\051\uff67\052\uff67\054\uff67\055\uff67\056\uff67\060\uff67" +
    "\061\uff67\062\uff67\063\uff67\064\uff67\065\uff67\066\uff67\067" +
    "\uff67\070\uff67\071\uff67\072\uff67\073\uff67\074\uff67\075\uff67" +
    "\076\uff67\077\uff67\100\uff67\101\uff67\102\uff67\103\uff67\104" +
    "\uff67\105\uff67\106\uff67\107\uff67\110\uff67\111\uff67\112\uff67" +
    "\114\uff67\115\uff67\001\002\000\070\005\uff81\034\uff81\052" +
    "\uff81\054\uff81\055\uff81\056\uff81\060\uff81\061\uff81\062\uff81" +
    "\063\uff81\064\uff81\065\uff81\067\uff81\070\uff81\071\uff81\072" +
    "\uff81\073\uff81\074\uff81\075\uff81\076\uff81\077\uff81\100\uff81" +
    "\101\uff81\103\uff81\104\uff81\114\uff81\115\uff81\001\002\000" +
    "\122\003\uff6d\005\uff6d\032\uff6d\034\uff6d\047\uff6d\050\uff6d" +
    "\051\uff6d\052\uff6d\054\uff6d\055\uff6d\056\uff6d\060\uff6d\061" +
    "\uff6d\062\uff6d\063\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d" +
    "\070\uff6d\071\uff6d\072\uff6d\073\uff6d\074\uff6d\075\uff6d\076" +
    "\uff6d\077\uff6d\100\uff6d\101\uff6d\102\uff6d\103\uff6d\104\uff6d" +
    "\105\uff6d\106\uff6d\107\uff6d\110\uff6d\111\uff6d\112\uff6d\114" +
    "\uff6d\115\uff6d\001\002\000\070\005\uff80\034\uff80\052\uff80" +
    "\054\uff80\055\uff80\056\uff80\060\uff80\061\uff80\062\uff80\063" +
    "\uff80\064\uff80\065\uff80\067\uff80\070\uff80\071\uff80\072\uff80" +
    "\073\uff80\074\uff80\075\uff80\076\uff80\077\uff80\100\uff80\101" +
    "\uff80\103\uff80\104\uff80\114\uff80\115\uff80\001\002\000\070" +
    "\005\uff85\034\uff85\052\uff85\054\uff85\055\uff85\056\uff85\060" +
    "\uff85\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85\067\uff85" +
    "\070\uff85\071\uff85\072\uff85\073\uff85\074\uff85\075\uff85\076" +
    "\uff85\077\uff85\100\uff85\101\uff85\103\uff85\104\uff85\114\uff85" +
    "\115\uff85\001\002\000\122\003\uff73\005\uff73\032\uff73\034" +
    "\uff73\047\uff73\050\uff73\051\uff73\052\uff73\054\uff73\055\uff73" +
    "\056\uff73\060\uff73\061\uff73\062\uff73\063\uff73\064\uff73\065" +
    "\uff73\066\uff73\067\uff73\070\uff73\071\uff73\072\uff73\073\uff73" +
    "\074\uff73\075\uff73\076\uff73\077\uff73\100\uff73\101\uff73\102" +
    "\uff73\103\uff73\104\uff73\105\uff73\106\uff73\107\uff73\110\uff73" +
    "\111\uff73\112\uff73\114\uff73\115\uff73\001\002\000\070\005" +
    "\uffb5\034\uffb5\052\uffb5\054\uffb5\055\uffb5\056\uffb5\060\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\067\uffb5\070" +
    "\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5" +
    "\077\uffb5\100\uffb5\101\uffb5\103\uffb5\104\uffb5\114\uffb5\115" +
    "\uffb5\001\002\000\122\003\uff6e\005\uff6e\032\uff6e\034\uff6e" +
    "\047\uff6e\050\uff6e\051\uff6e\052\uff6e\054\uff6e\055\uff6e\056" +
    "\uff6e\060\uff6e\061\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e" +
    "\066\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e\073\uff6e\074" +
    "\uff6e\075\uff6e\076\uff6e\077\uff6e\100\uff6e\101\uff6e\102\uff6e" +
    "\103\uff6e\104\uff6e\105\uff6e\106\uff6e\107\uff6e\110\uff6e\111" +
    "\uff6e\112\uff6e\114\uff6e\115\uff6e\001\002\000\122\003\uff79" +
    "\005\uff79\032\uff79\034\uff79\047\uff79\050\uff79\051\uff79\052" +
    "\uff79\054\uff79\055\uff79\056\uff79\060\uff79\061\uff79\062\uff79" +
    "\063\uff79\064\uff79\065\uff79\066\uff79\067\uff79\070\uff79\071" +
    "\uff79\072\uff79\073\uff79\074\uff79\075\uff79\076\uff79\077\uff79" +
    "\100\uff79\101\uff79\102\uff79\103\uff79\104\uff79\105\uff79\106" +
    "\uff79\107\uff79\110\uff79\111\uff79\112\uff79\114\uff79\115\uff79" +
    "\001\002\000\122\003\uff68\005\uff68\032\uff68\034\uff68\047" +
    "\uff68\050\uff68\051\uff68\052\uff68\054\uff68\055\uff68\056\uff68" +
    "\060\uff68\061\uff68\062\uff68\063\uff68\064\uff68\065\uff68\066" +
    "\uff68\067\uff68\070\uff68\071\uff68\072\uff68\073\uff68\074\uff68" +
    "\075\uff68\076\uff68\077\uff68\100\uff68\101\uff68\102\uff68\103" +
    "\uff68\104\uff68\105\uff68\106\uff68\107\uff68\110\uff68\111\uff68" +
    "\112\uff68\114\uff68\115\uff68\001\002\000\070\005\uffb4\034" +
    "\uffb4\052\uffb4\054\uffb4\055\uffb4\056\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\064\uffb4\065\uffb4\067\uffb4\070\uffb4\071" +
    "\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4" +
    "\100\uffb4\101\uffb4\103\uffb4\104\uffb4\114\uffb4\115\uffb4\001" +
    "\002\000\070\005\uff86\034\uff86\052\uff86\054\uff86\055\uff86" +
    "\056\uff86\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86\065" +
    "\uff86\067\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86" +
    "\075\uff86\076\uff86\077\uff86\100\uff86\101\uff86\103\uff86\104" +
    "\uff86\114\uff86\115\uff86\001\002\000\122\003\uff78\005\uff78" +
    "\032\uff78\034\uff78\047\uff78\050\uff78\051\uff78\052\uff78\054" +
    "\uff78\055\uff78\056\uff78\060\uff78\061\uff78\062\uff78\063\uff78" +
    "\064\uff78\065\uff78\066\uff78\067\uff78\070\uff78\071\uff78\072" +
    "\uff78\073\uff78\074\uff78\075\uff78\076\uff78\077\uff78\100\uff78" +
    "\101\uff78\102\uff78\103\uff78\104\uff78\105\uff78\106\uff78\107" +
    "\uff78\110\uff78\111\uff78\112\uff78\114\uff78\115\uff78\001\002" +
    "\000\122\003\uff6a\005\uff6a\032\uff6a\034\uff6a\047\uff6a\050" +
    "\uff6a\051\uff6a\052\uff6a\054\uff6a\055\uff6a\056\uff6a\060\uff6a" +
    "\061\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a\066\uff6a\067" +
    "\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a\075\uff6a" +
    "\076\uff6a\077\uff6a\100\uff6a\101\uff6a\102\uff6a\103\uff6a\104" +
    "\uff6a\105\uff6a\106\uff6a\107\uff6a\110\uff6a\111\uff6a\112\uff6a" +
    "\114\uff6a\115\uff6a\001\002\000\122\003\uff74\005\uff74\032" +
    "\uff74\034\uff74\047\uff74\050\uff74\051\uff74\052\uff74\054\uff74" +
    "\055\uff74\056\uff74\060\uff74\061\uff74\062\uff74\063\uff74\064" +
    "\uff74\065\uff74\066\uff74\067\uff74\070\uff74\071\uff74\072\uff74" +
    "\073\uff74\074\uff74\075\uff74\076\uff74\077\uff74\100\uff74\101" +
    "\uff74\102\uff74\103\uff74\104\uff74\105\uff74\106\uff74\107\uff74" +
    "\110\uff74\111\uff74\112\uff74\114\uff74\115\uff74\001\002\000" +
    "\070\005\uff82\034\uff82\052\uff82\054\uff82\055\uff82\056\uff82" +
    "\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82\065\uff82\067" +
    "\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82" +
    "\076\uff82\077\uff82\100\uff82\101\uff82\103\uff82\104\uff82\114" +
    "\uff82\115\uff82\001\002\000\122\003\uff6c\005\uff6c\032\uff6c" +
    "\034\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\054\uff6c\055" +
    "\uff6c\056\uff6c\060\uff6c\061\uff6c\062\uff6c\063\uff6c\064\uff6c" +
    "\065\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\073" +
    "\uff6c\074\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c\101\uff6c" +
    "\102\uff6c\103\uff6c\104\uff6c\105\uff6c\106\uff6c\107\uff6c\110" +
    "\uff6c\111\uff6c\112\uff6c\114\uff6c\115\uff6c\001\002\000\122" +
    "\003\uff69\005\uff69\032\uff69\034\uff69\047\uff69\050\uff69\051" +
    "\uff69\052\uff69\054\uff69\055\uff69\056\uff69\060\uff69\061\uff69" +
    "\062\uff69\063\uff69\064\uff69\065\uff69\066\uff69\067\uff69\070" +
    "\uff69\071\uff69\072\uff69\073\uff69\074\uff69\075\uff69\076\uff69" +
    "\077\uff69\100\uff69\101\uff69\102\uff69\103\uff69\104\uff69\105" +
    "\uff69\106\uff69\107\uff69\110\uff69\111\uff69\112\uff69\114\uff69" +
    "\115\uff69\001\002\000\122\003\uff71\005\uff71\032\uff71\034" +
    "\uff71\047\uff71\050\uff71\051\uff71\052\uff71\054\uff71\055\uff71" +
    "\056\uff71\060\uff71\061\uff71\062\uff71\063\uff71\064\uff71\065" +
    "\uff71\066\uff71\067\uff71\070\uff71\071\uff71\072\uff71\073\uff71" +
    "\074\uff71\075\uff71\076\uff71\077\uff71\100\uff71\101\uff71\102" +
    "\uff71\103\uff71\104\uff71\105\uff71\106\uff71\107\uff71\110\uff71" +
    "\111\uff71\112\uff71\114\uff71\115\uff71\001\002\000\070\005" +
    "\uff83\034\uff83\052\uff83\054\uff83\055\uff83\056\uff83\060\uff83" +
    "\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83\067\uff83\070" +
    "\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075\uff83\076\uff83" +
    "\077\uff83\100\uff83\101\uff83\103\uff83\104\uff83\114\uff83\115" +
    "\uff83\001\002\000\036\003\117\032\075\047\101\050\110" +
    "\051\102\066\100\072\111\102\077\105\105\106\076\107" +
    "\103\110\052\111\050\112\035\001\002\000\036\003\117" +
    "\032\075\047\101\050\110\051\102\066\100\072\111\102" +
    "\077\105\105\106\076\107\103\110\052\111\050\112\035" +
    "\001\002\000\036\003\117\032\075\047\101\050\110\051" +
    "\102\066\100\072\111\102\077\105\105\106\076\107\103" +
    "\110\052\111\050\112\035\001\002\000\036\003\117\032" +
    "\075\047\101\050\110\051\102\066\100\072\111\102\077" +
    "\105\105\106\076\107\103\110\052\111\050\112\035\001" +
    "\002\000\036\003\117\032\075\047\101\050\110\051\102" +
    "\066\100\072\111\102\077\105\105\106\076\107\103\110" +
    "\052\111\050\112\035\001\002\000\036\003\117\032\075" +
    "\047\101\050\110\051\102\066\100\072\111\102\077\105" +
    "\105\106\076\107\103\110\052\111\050\112\035\001\002" +
    "\000\070\005\uff90\034\uff90\052\uff90\054\uff90\055\uff90\056" +
    "\uff90\060\155\061\125\062\124\063\142\064\135\065\153" +
    "\067\144\070\133\071\126\072\151\073\143\074\147\075" +
    "\121\076\130\077\123\100\150\101\154\103\140\104\132" +
    "\114\uff90\115\uff90\001\002\000\070\005\uff8f\034\uff8f\052" +
    "\uff8f\054\uff8f\055\uff8f\056\uff8f\060\155\061\125\062\124" +
    "\063\142\064\135\065\153\067\144\070\133\071\126\072" +
    "\151\073\143\074\147\075\121\076\130\077\123\100\150" +
    "\101\154\103\140\104\132\114\uff8f\115\uff8f\001\002\000" +
    "\070\005\uff93\034\uff93\052\uff93\054\uff93\055\uff93\056\uff93" +
    "\060\155\061\125\062\124\063\142\064\135\065\153\067" +
    "\144\070\133\071\126\072\151\073\143\074\147\075\121" +
    "\076\130\077\123\100\150\101\154\103\140\104\132\114" +
    "\uff93\115\uff93\001\002\000\070\005\uff92\034\uff92\052\uff92" +
    "\054\uff92\055\uff92\056\uff92\060\155\061\125\062\124\063" +
    "\142\064\135\065\153\067\144\070\133\071\126\072\151" +
    "\073\143\074\147\075\121\076\130\077\123\100\150\101" +
    "\154\103\140\104\132\114\uff92\115\uff92\001\002\000\070" +
    "\005\uff8e\034\uff8e\052\uff8e\054\uff8e\055\uff8e\056\uff8e\060" +
    "\155\061\125\062\124\063\142\064\135\065\153\067\144" +
    "\070\133\071\126\072\151\073\143\074\147\075\121\076" +
    "\130\077\123\100\150\101\154\103\140\104\132\114\uff8e" +
    "\115\uff8e\001\002\000\070\005\uff91\034\uff91\052\uff91\054" +
    "\uff91\055\uff91\056\uff91\060\155\061\125\062\124\063\142" +
    "\064\135\065\153\067\144\070\133\071\126\072\151\073" +
    "\143\074\147\075\121\076\130\077\123\100\150\101\154" +
    "\103\140\104\132\114\uff91\115\uff91\001\002\000\006\114" +
    "\uff98\115\uff98\001\002\000\036\003\117\032\075\047\101" +
    "\050\110\051\102\066\100\072\111\102\077\105\105\106" +
    "\076\107\103\110\052\111\050\112\035\001\002\000\040" +
    "\003\117\032\075\047\101\050\110\051\102\052\177\066" +
    "\100\072\111\102\077\105\105\106\076\107\103\110\052" +
    "\111\050\112\035\001\002\000\054\052\200\055\201\060" +
    "\155\061\125\062\124\063\142\064\135\065\153\067\144" +
    "\070\133\071\126\072\151\073\143\074\147\075\121\076" +
    "\130\077\123\100\150\101\154\103\140\104\132\001\002" +
    "\000\070\005\uffae\034\uffae\052\uffae\054\uffae\055\uffae\056" +
    "\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae" +
    "\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075" +
    "\uffae\076\uffae\077\uffae\100\uffae\101\uffae\103\uffae\104\uffae" +
    "\114\uffae\115\uffae\001\002\000\070\005\uffaf\034\uffaf\052" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\060\uffaf\061\uffaf\062\uffaf" +
    "\063\uffaf\064\uffaf\065\uffaf\067\uffaf\070\uffaf\071\uffaf\072" +
    "\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf" +
    "\101\uffaf\103\uffaf\104\uffaf\114\uffaf\115\uffaf\001\002\000" +
    "\036\003\117\032\075\047\101\050\110\051\102\066\100" +
    "\072\111\102\077\105\105\106\076\107\103\110\052\111" +
    "\050\112\035\001\002\000\062\034\uffa5\052\uffa5\055\205" +
    "\060\155\061\125\062\124\063\142\064\135\065\153\067" +
    "\144\070\133\071\126\072\151\073\143\074\147\075\121" +
    "\076\130\077\123\100\150\101\154\103\140\104\132\114" +
    "\uffa5\115\uffa5\001\002\000\004\052\204\001\002\000\070" +
    "\005\uffb0\034\uffb0\052\uffb0\054\uffb0\055\uffb0\056\uffb0\060" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\067\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076" +
    "\uffb0\077\uffb0\100\uffb0\101\uffb0\103\uffb0\104\uffb0\114\uffb0" +
    "\115\uffb0\001\002\000\036\003\117\032\075\047\101\050" +
    "\110\051\102\066\100\072\111\102\077\105\105\106\076" +
    "\107\103\110\052\111\050\112\035\001\002\000\012\034" +
    "\uffa6\052\uffa6\114\uffa6\115\uffa6\001\002\000\052\054\210" +
    "\060\155\061\125\062\124\063\142\064\135\065\153\067" +
    "\144\070\133\071\126\072\151\073\143\074\147\075\121" +
    "\076\130\077\123\100\150\101\154\103\140\104\132\001" +
    "\002\000\070\005\uff89\034\uff89\052\uff89\054\uff89\055\uff89" +
    "\056\uff89\060\uff89\061\uff89\062\uff89\063\uff89\064\uff89\065" +
    "\uff89\067\uff89\070\uff89\071\uff89\072\uff89\073\uff89\074\uff89" +
    "\075\uff89\076\uff89\077\uff89\100\uff89\101\uff89\103\uff89\104" +
    "\uff89\114\uff89\115\uff89\001\002\000\052\052\212\060\155" +
    "\061\125\062\124\063\142\064\135\065\153\067\144\070" +
    "\133\071\126\072\151\073\143\074\147\075\121\076\130" +
    "\077\123\100\150\101\154\103\140\104\132\001\002\000" +
    "\070\005\uff8c\034\uff8c\052\uff8c\054\uff8c\055\uff8c\056\uff8c" +
    "\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c\067" +
    "\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c" +
    "\076\uff8c\077\uff8c\100\uff8c\101\uff8c\103\uff8c\104\uff8c\114" +
    "\uff8c\115\uff8c\001\002\000\004\107\214\001\002\000\006" +
    "\052\216\055\215\001\002\000\036\003\117\032\075\047" +
    "\101\050\110\051\102\066\100\072\111\102\077\105\105" +
    "\106\076\107\103\110\052\111\050\112\035\001\002\000" +
    "\070\005\uffb7\034\uffb7\052\uffb7\054\uffb7\055\uffb7\056\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\067" +
    "\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7" +
    "\076\uffb7\077\uffb7\100\uffb7\101\uffb7\103\uffb7\104\uffb7\114" +
    "\uffb7\115\uffb7\001\002\000\004\052\220\001\002\000\070" +
    "\005\uffb6\034\uffb6\052\uffb6\054\uffb6\055\uffb6\056\uffb6\060" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\067\uffb6" +
    "\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076" +
    "\uffb6\077\uffb6\100\uffb6\101\uffb6\103\uffb6\104\uffb6\114\uffb6" +
    "\115\uffb6\001\002\000\042\003\112\032\075\047\101\050" +
    "\110\051\102\055\104\056\072\066\100\072\111\102\077" +
    "\105\105\106\076\107\103\110\052\111\050\112\035\001" +
    "\002\000\042\003\112\032\075\047\101\050\110\051\102" +
    "\055\104\056\072\066\100\072\111\102\077\105\105\106" +
    "\076\107\103\110\052\111\050\112\035\001\002\000\006" +
    "\114\uff9d\115\uff9d\001\002\000\006\114\uff9c\115\uff9c\001" +
    "\002\000\006\114\uffe0\115\uffe0\001\002\000\012\053\230" +
    "\057\227\114\uffe4\115\uffe4\001\002\000\036\003\117\032" +
    "\075\047\101\050\110\051\102\066\100\072\111\102\077" +
    "\105\105\106\076\107\103\110\052\111\050\112\035\001" +
    "\002\000\036\003\117\032\075\047\101\050\110\051\102" +
    "\066\100\072\111\102\077\105\105\106\076\107\103\110" +
    "\052\111\050\112\035\001\002\000\052\054\232\060\155" +
    "\061\125\062\124\063\142\064\135\065\153\067\144\070" +
    "\133\071\126\072\151\073\143\074\147\075\121\076\130" +
    "\077\123\100\150\101\154\103\140\104\132\001\002\000" +
    "\010\057\233\114\uffe2\115\uffe2\001\002\000\036\003\117" +
    "\032\075\047\101\050\110\051\102\066\100\072\111\102" +
    "\077\105\105\106\076\107\103\110\052\111\050\112\035" +
    "\001\002\000\054\060\155\061\125\062\124\063\142\064" +
    "\135\065\153\067\144\070\133\071\126\072\151\073\143" +
    "\074\147\075\121\076\130\077\123\100\150\101\154\103" +
    "\140\104\132\114\uffdd\115\uffdd\001\002\000\054\060\155" +
    "\061\125\062\124\063\142\064\135\065\153\067\144\070" +
    "\133\071\126\072\151\073\143\074\147\075\121\076\130" +
    "\077\123\100\150\101\154\103\140\104\132\114\uffde\115" +
    "\uffde\001\002\000\006\114\uffc6\115\uffc6\001\002\000\004" +
    "\055\240\001\002\000\010\110\052\111\050\112\035\001" +
    "\002\000\006\114\uffa0\115\uffa0\001\002\000\010\055\243" +
    "\114\uffa2\115\uffa2\001\002\000\036\003\117\032\075\047" +
    "\101\050\110\051\102\066\100\072\111\102\077\105\105" +
    "\106\076\107\103\110\052\111\050\112\035\001\002\000" +
    "\054\060\155\061\125\062\124\063\142\064\135\065\153" +
    "\067\144\070\133\071\126\072\151\073\143\074\147\075" +
    "\121\076\130\077\123\100\150\101\154\103\140\104\132" +
    "\114\uffa1\115\uffa1\001\002\000\022\003\250\034\253\051" +
    "\252\110\052\111\050\112\035\114\044\115\045\001\002" +
    "\000\014\034\uffa9\052\uffa9\055\305\114\uffa9\115\uffa9\001" +
    "\002\000\072\003\276\004\032\011\027\015\017\021\047" +
    "\023\015\025\014\026\041\027\046\030\066\031\057\032" +
    "\022\033\037\036\067\037\036\040\024\041\062\042\065" +
    "\043\070\044\056\045\013\046\026\110\052\111\050\112" +
    "\035\113\064\114\044\115\045\001\002\000\012\052\272" +
    "\055\257\114\044\115\045\001\002\000\004\034\267\001" +
    "\002\000\014\003\256\052\263\110\052\111\050\112\035" +
    "\001\002\000\012\003\256\110\052\111\050\112\035\001" +
    "\002\000\072\003\uffc0\004\uffc0\011\uffc0\015\uffc0\021\uffc0" +
    "\023\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\110\uffc0\111\uffc0\112" +
    "\uffc0\113\uffc0\114\uffc0\115\uffc0\001\002\000\006\114\044" +
    "\115\045\001\002\000\010\055\257\114\044\115\045\001" +
    "\002\000\012\034\uffa8\052\uffa8\114\uffa8\115\uffa8\001\002" +
    "\000\012\034\uffa7\052\uffa7\114\uffa7\115\uffa7\001\002\000" +
    "\072\003\uffc1\004\uffc1\011\uffc1\015\uffc1\021\uffc1\023\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\110\uffc1\111\uffc1\112\uffc1\113" +
    "\uffc1\114\uffc1\115\uffc1\001\002\000\004\052\265\001\002" +
    "\000\006\114\044\115\045\001\002\000\072\003\uffc3\004" +
    "\uffc3\011\uffc3\015\uffc3\021\uffc3\023\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\110\uffc3\111\uffc3\112\uffc3\113\uffc3\114\uffc3\115" +
    "\uffc3\001\002\000\006\114\044\115\045\001\002\000\072" +
    "\003\uffc4\004\uffc4\011\uffc4\015\uffc4\021\uffc4\023\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\110\uffc4\111\uffc4\112\uffc4\113\uffc4" +
    "\114\uffc4\115\uffc4\001\002\000\012\003\256\110\052\111" +
    "\050\112\035\001\002\000\006\114\044\115\045\001\002" +
    "\000\072\003\uffc2\004\uffc2\011\uffc2\015\uffc2\021\uffc2\023" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\110\uffc2\111\uffc2\112\uffc2" +
    "\113\uffc2\114\uffc2\115\uffc2\001\002\000\072\003\uffbf\004" +
    "\uffbf\011\uffbf\015\uffbf\021\uffbf\023\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\110\uffbf\111\uffbf\112\uffbf\113\uffbf\114\uffbf\115" +
    "\uffbf\001\002\000\074\003\uffbe\004\uffbe\011\uffbe\015\uffbe" +
    "\021\uffbe\023\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\034\uffa7\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\110" +
    "\uffbe\111\uffbe\112\uffbe\113\uffbe\114\uffbe\115\uffbe\001\002" +
    "\000\004\035\304\001\002\000\006\114\044\115\045\001" +
    "\002\000\006\114\044\115\045\001\002\000\072\003\276" +
    "\004\032\011\027\015\017\021\047\023\015\025\014\026" +
    "\041\027\046\030\066\031\057\032\022\033\037\036\067" +
    "\037\036\040\024\041\062\042\065\043\070\044\056\045" +
    "\013\046\026\110\052\111\050\112\035\113\064\114\044" +
    "\115\045\001\002\000\004\035\ufffe\001\002\000\004\035" +
    "\ufffc\001\002\000\074\003\276\004\032\011\027\015\017" +
    "\021\047\023\015\025\014\026\041\027\046\030\066\031" +
    "\057\032\022\033\037\035\ufffd\036\067\037\036\040\024" +
    "\041\062\042\065\043\070\044\056\045\013\046\026\110" +
    "\052\111\050\112\035\113\064\114\044\115\045\001\002" +
    "\000\004\035\uffff\001\002\000\006\114\uffc5\115\uffc5\001" +
    "\002\000\012\003\256\110\052\111\050\112\035\001\002" +
    "\000\012\034\uffaa\052\uffaa\114\uffaa\115\uffaa\001\002\000" +
    "\006\114\uff9e\115\uff9e\001\002\000\120\002\ufff7\003\ufff7" +
    "\004\032\006\ufff7\007\ufff7\010\ufff7\011\027\012\ufff7\013" +
    "\ufff7\014\ufff7\015\017\020\ufff7\021\047\022\ufff7\023\015" +
    "\024\ufff7\025\014\026\041\027\046\030\066\031\057\032" +
    "\022\033\037\035\053\036\067\037\036\040\024\041\062" +
    "\042\065\043\070\044\056\045\013\046\026\110\052\111" +
    "\050\112\035\113\064\114\044\115\045\001\002\000\030" +
    "\002\ufffa\003\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\020\ufffa\022\ufffa\024\ufffa\001\002\000\054" +
    "\060\155\061\125\062\124\063\142\064\135\065\153\067" +
    "\144\070\133\071\126\072\151\073\143\074\147\075\121" +
    "\076\130\077\123\100\150\101\154\103\140\104\132\114" +
    "\044\115\045\001\002\000\072\004\032\011\027\015\017" +
    "\021\047\023\015\025\014\026\041\027\046\030\066\031" +
    "\057\032\022\033\037\035\053\036\067\037\036\040\024" +
    "\041\062\042\065\043\070\044\056\045\013\046\026\110" +
    "\052\111\050\112\035\113\064\114\044\115\045\001\002" +
    "\000\004\022\315\001\002\000\006\114\uffc9\115\uffc9\001" +
    "\002\000\006\114\uffc7\115\uffc7\001\002\000\036\003\117" +
    "\032\075\047\101\050\110\051\102\066\100\072\111\102" +
    "\077\105\105\106\076\107\103\110\052\111\050\112\035" +
    "\001\002\000\040\003\117\032\075\047\101\050\110\051" +
    "\102\052\177\066\100\072\111\102\077\105\105\106\076" +
    "\107\103\110\052\111\050\112\035\001\002\000\004\034" +
    "\324\001\002\000\012\003\256\110\052\111\050\112\035" +
    "\001\002\000\006\114\uffac\115\uffac\001\002\000\012\003" +
    "\256\110\052\111\050\112\035\001\002\000\006\114\uffad" +
    "\115\uffad\001\002\000\054\052\327\055\201\060\155\061" +
    "\125\062\124\063\142\064\135\065\153\067\144\070\133" +
    "\071\126\072\151\073\143\074\147\075\121\076\130\077" +
    "\123\100\150\101\154\103\140\104\132\001\002\000\060" +
    "\034\uff8c\055\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064" +
    "\uff8c\065\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c" +
    "\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\101\uff8c\103" +
    "\uff8c\104\uff8c\114\uffaf\115\uffaf\001\002\000\052\054\331" +
    "\060\155\061\125\062\124\063\142\064\135\065\153\067" +
    "\144\070\133\071\126\072\151\073\143\074\147\075\121" +
    "\076\130\077\123\100\150\101\154\103\140\104\132\001" +
    "\002\000\004\057\233\001\002\000\030\002\ufff9\003\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9\020" +
    "\ufff9\022\ufff9\024\ufff9\001\002\000\054\060\155\061\125" +
    "\062\124\063\142\064\135\065\153\067\144\070\133\071" +
    "\126\072\151\073\143\074\147\075\121\076\130\077\123" +
    "\100\150\101\154\103\140\104\132\114\uffbd\115\uffbd\001" +
    "\002\000\006\114\uffdf\115\uffdf\001\002\000\012\053\336" +
    "\057\227\114\uffe3\115\uffe3\001\002\000\036\003\117\032" +
    "\075\047\101\050\110\051\102\066\100\072\111\102\077" +
    "\105\105\106\076\107\103\110\052\111\050\112\035\001" +
    "\002\000\052\054\340\060\155\061\125\062\124\063\142" +
    "\064\135\065\153\067\144\070\133\071\126\072\151\073" +
    "\143\074\147\075\121\076\130\077\123\100\150\101\154" +
    "\103\140\104\132\001\002\000\010\057\233\114\uffe1\115" +
    "\uffe1\001\002\000\052\005\342\060\155\061\125\062\124" +
    "\063\142\064\135\065\153\067\144\070\133\071\126\072" +
    "\151\073\143\074\147\075\121\076\130\077\123\100\150" +
    "\101\154\103\140\104\132\001\002\000\072\004\032\011" +
    "\027\015\017\021\047\023\015\025\014\026\041\027\046" +
    "\030\066\031\057\032\022\033\037\035\053\036\067\037" +
    "\036\040\024\041\062\042\065\043\070\044\056\045\013" +
    "\046\026\110\052\111\050\112\035\113\064\114\044\115" +
    "\045\001\002\000\012\003\345\006\346\007\344\010\347" +
    "\001\002\000\036\003\117\032\075\047\101\050\110\051" +
    "\102\066\100\072\111\102\077\105\105\106\076\107\103" +
    "\110\052\111\050\112\035\001\002\000\006\005\353\010" +
    "\354\001\002\000\072\004\032\011\027\015\017\021\047" +
    "\023\015\025\014\026\041\027\046\030\066\031\057\032" +
    "\022\033\037\035\053\036\067\037\036\040\024\041\062" +
    "\042\065\043\070\044\056\045\013\046\026\110\052\111" +
    "\050\112\035\113\064\114\044\115\045\001\002\000\006" +
    "\114\uffd7\115\uffd7\001\002\000\006\114\uffda\115\uffda\001" +
    "\002\000\004\010\352\001\002\000\006\114\uffd8\115\uffd8" +
    "\001\002\000\006\114\uffd6\115\uffd6\001\002\000\006\114" +
    "\uffd5\115\uffd5\001\002\000\052\005\356\060\155\061\125" +
    "\062\124\063\142\064\135\065\153\067\144\070\133\071" +
    "\126\072\151\073\143\074\147\075\121\076\130\077\123" +
    "\100\150\101\154\103\140\104\132\001\002\000\072\004" +
    "\032\011\027\015\017\021\047\023\015\025\014\026\041" +
    "\027\046\030\066\031\057\032\022\033\037\035\053\036" +
    "\067\037\036\040\024\041\062\042\065\043\070\044\056" +
    "\045\013\046\026\110\052\111\050\112\035\113\064\114" +
    "\044\115\045\001\002\000\012\003\345\006\346\007\344" +
    "\010\347\001\002\000\006\114\uffd9\115\uffd9\001\002\000" +
    "\120\002\ufff8\003\ufff8\004\032\006\ufff8\007\ufff8\010\ufff8" +
    "\011\027\012\ufff8\013\ufff8\014\ufff8\015\017\020\ufff8\021" +
    "\047\022\ufff8\023\015\024\ufff8\025\014\026\041\027\046" +
    "\030\066\031\057\032\022\033\037\035\053\036\067\037" +
    "\036\040\024\041\062\042\065\043\070\044\056\045\013" +
    "\046\026\110\052\111\050\112\035\113\064\114\044\115" +
    "\045\001\002\000\030\002\ufffb\003\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\012\ufffb\013\ufffb\014\ufffb\020\ufffb\022\ufffb\024" +
    "\ufffb\001\002\000\054\060\155\061\125\062\124\063\142" +
    "\064\135\065\153\067\144\070\133\071\126\072\151\073" +
    "\143\074\147\075\121\076\130\077\123\100\150\101\154" +
    "\103\140\104\132\114\044\115\045\001\002\000\010\003" +
    "\366\012\370\013\365\001\002\000\006\114\044\115\045" +
    "\001\002\000\006\114\044\115\045\001\002\000\004\014" +
    "\375\001\002\000\014\047\101\050\110\105\105\106\076" +
    "\107\103\001\002\000\006\114\044\115\045\001\002\000" +
    "\072\004\032\011\027\015\017\021\047\023\015\025\014" +
    "\026\041\027\046\030\066\031\057\032\022\033\037\035" +
    "\053\036\067\037\036\040\024\041\062\042\065\043\070" +
    "\044\056\045\013\046\026\110\052\111\050\112\035\113" +
    "\064\114\044\115\045\001\002\000\012\003\366\012\370" +
    "\013\365\014\uffd1\001\002\000\004\014\uffd3\001\002\000" +
    "\006\114\uffd4\115\uffd4\001\002\000\004\014\uffcf\001\002" +
    "\000\072\004\032\011\027\015\017\021\047\023\015\025" +
    "\014\026\041\027\046\030\066\031\057\032\022\033\037" +
    "\035\053\036\067\037\036\040\024\041\062\042\065\043" +
    "\070\044\056\045\013\046\026\110\052\111\050\112\035" +
    "\113\064\114\044\115\045\001\002\000\012\003\366\012" +
    "\370\013\365\014\uffd0\001\002\000\004\014\uffd2\001\002" +
    "\000\004\056\u0103\001\002\000\004\110\u0104\001\002\000" +
    "\006\114\uff94\115\uff94\001\002\000\010\055\u0106\114\uffa4" +
    "\115\uffa4\001\002\000\036\003\117\032\075\047\101\050" +
    "\110\051\102\066\100\072\111\102\077\105\105\106\076" +
    "\107\103\110\052\111\050\112\035\001\002\000\054\060" +
    "\155\061\125\062\124\063\142\064\135\065\153\067\144" +
    "\070\133\071\126\072\151\073\143\074\147\075\121\076" +
    "\130\077\123\100\150\101\154\103\140\104\132\114\uffa3" +
    "\115\uffa3\001\002\000\012\034\u0109\055\u010a\114\uffbb\115" +
    "\uffbb\001\002\000\012\003\256\110\052\111\050\112\035" +
    "\001\002\000\036\003\117\032\075\047\101\050\110\051" +
    "\102\066\100\072\111\102\077\105\105\106\076\107\103" +
    "\110\052\111\050\112\035\001\002\000\010\034\u010c\114" +
    "\uffba\115\uffba\001\002\000\012\003\256\110\052\111\050" +
    "\112\035\001\002\000\006\114\uffb8\115\uffb8\001\002\000" +
    "\006\114\uffb9\115\uffb9\001\002\000\004\057\u0110\001\002" +
    "\000\016\047\u0111\050\u0115\105\u0114\106\u0117\111\u0113\112" +
    "\u0116\001\002\000\012\016\uff5d\017\uff5d\114\uff5d\115\uff5d" +
    "\001\002\000\004\016\u0118\001\002\000\012\016\uff60\017" +
    "\uff60\114\uff60\115\uff60\001\002\000\012\016\uff5f\017\uff5f" +
    "\114\uff5f\115\uff5f\001\002\000\012\016\uff5c\017\uff5c\114" +
    "\uff5c\115\uff5c\001\002\000\012\016\uff61\017\uff61\114\uff61" +
    "\115\uff61\001\002\000\012\016\uff5e\017\uff5e\114\uff5e\115" +
    "\uff5e\001\002\000\016\047\u0111\050\u0115\105\u0114\106\u0117" +
    "\111\u0113\112\u0116\001\002\000\010\017\u011a\114\044\115" +
    "\045\001\002\000\016\047\u0111\050\u0115\105\u0114\106\u0117" +
    "\111\u0113\112\u0116\001\002\000\072\004\032\011\027\015" +
    "\017\021\047\023\015\025\014\026\041\027\046\030\066" +
    "\031\057\032\022\033\037\035\053\036\067\037\036\040" +
    "\024\041\062\042\065\043\070\044\056\045\013\046\026" +
    "\110\052\111\050\112\035\113\064\114\044\115\045\001" +
    "\002\000\004\020\u011d\001\002\000\006\114\uffcb\115\uffcb" +
    "\001\002\000\006\114\044\115\045\001\002\000\072\004" +
    "\032\011\027\015\017\021\047\023\015\025\014\026\041" +
    "\027\046\030\066\031\057\032\022\033\037\035\053\036" +
    "\067\037\036\040\024\041\062\042\065\043\070\044\056" +
    "\045\013\046\026\110\052\111\050\112\035\113\064\114" +
    "\044\115\045\001\002\000\004\020\u0121\001\002\000\006" +
    "\114\uffca\115\uffca\001\002\000\072\004\032\011\027\015" +
    "\017\021\047\023\015\025\014\026\041\027\046\030\066" +
    "\031\057\032\022\033\037\035\053\036\067\037\036\040" +
    "\024\041\062\042\065\043\070\044\056\045\013\046\026" +
    "\110\052\111\050\112\035\113\064\114\044\115\045\001" +
    "\002\000\004\024\u0124\001\002\000\036\003\117\032\075" +
    "\047\101\050\110\051\102\066\100\072\111\102\077\105" +
    "\105\106\076\107\103\110\052\111\050\112\035\001\002" +
    "\000\054\060\155\061\125\062\124\063\142\064\135\065" +
    "\153\067\144\070\133\071\126\072\151\073\143\074\147" +
    "\075\121\076\130\077\123\100\150\101\154\103\140\104" +
    "\132\114\uffc8\115\uffc8\001\002\000\006\114\uff95\115\uff95" +
    "\001\002\000\006\055\u0128\056\u0129\001\002\000\012\003" +
    "\256\110\052\111\050\112\035\001\002\000\012\003\256" +
    "\110\052\111\050\112\035\001\002\000\006\114\uff97\115" +
    "\uff97\001\002\000\006\114\uff96\115\uff96\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\066\002\003\003\030\005\020\006\062\007" +
    "\011\010\027\011\006\012\060\013\024\016\033\017\015" +
    "\020\007\022\004\026\070\027\053\030\050\031\005\032" +
    "\022\033\057\034\041\036\017\037\054\040\032\041\010" +
    "\042\037\046\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\u0125\046" +
    "\245\001\001\000\002\001\001\000\004\042\u0121\001\001" +
    "\000\002\001\001\000\004\046\u010e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\023\072\027\113\043\362\045\112\046\105" +
    "\055\114\001\001\000\002\001\001\000\004\042\360\001" +
    "\001\000\016\023\072\027\113\043\340\045\112\046\105" +
    "\055\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\333\046\334\001\001\000\016" +
    "\023\072\027\113\043\332\045\112\046\105\055\114\001" +
    "\001\000\064\003\030\005\331\006\062\007\011\010\027" +
    "\011\006\012\060\013\024\016\033\017\015\020\007\022" +
    "\004\026\070\027\053\030\050\031\005\032\022\033\057" +
    "\034\041\036\017\037\054\040\032\041\010\042\037\046" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\023\072\024\320\027\113\043\201\045\112\046\105\055" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\023\072\027\113\043\311\045\112\046" +
    "\105\055\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\023\072\027\113\035\306" +
    "\043\073\045\112\046\105\055\114\001\001\000\004\046" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\236\001\001\000\002\001\001\000\006\007\224" +
    "\046\225\001\001\000\020\023\072\027\113\035\106\043" +
    "\073\045\112\046\105\055\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\047\157\050" +
    "\162\051\156\052\160\053\161\054\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\023\072\027\113\043\210" +
    "\045\112\046\105\055\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\042" +
    "\144\047\133\050\151\051\121\052\136\053\145\054\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\023" +
    "\072\027\113\043\115\045\112\046\105\055\114\001\001" +
    "\000\016\047\157\050\162\051\156\052\160\053\161\054" +
    "\163\001\001\000\020\042\144\047\133\050\151\051\121" +
    "\052\136\053\145\054\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\023\072\027\113\043\171\045\112\046" +
    "\105\055\114\001\001\000\016\023\072\027\113\043\170" +
    "\045\112\046\105\055\114\001\001\000\016\023\072\027" +
    "\113\043\167\045\112\046\105\055\114\001\001\000\016" +
    "\023\072\027\113\043\166\045\112\046\105\055\114\001" +
    "\001\000\016\023\072\027\113\043\165\045\112\046\105" +
    "\055\114\001\001\000\016\023\072\027\113\043\164\045" +
    "\112\046\105\055\114\001\001\000\016\047\157\050\162" +
    "\051\156\052\160\053\161\054\163\001\001\000\016\047" +
    "\157\050\162\051\156\052\160\053\161\054\163\001\001" +
    "\000\016\047\157\050\162\051\156\052\160\053\161\054" +
    "\163\001\001\000\016\047\157\050\162\051\156\052\160" +
    "\053\161\054\163\001\001\000\016\047\157\050\162\051" +
    "\156\052\160\053\161\054\163\001\001\000\016\047\157" +
    "\050\162\051\156\052\160\053\161\054\163\001\001\000" +
    "\002\001\001\000\016\023\072\027\113\043\206\045\112" +
    "\046\105\055\114\001\001\000\016\023\072\027\113\043" +
    "\175\045\112\046\105\055\114\001\001\000\016\047\157" +
    "\050\162\051\156\052\160\053\161\054\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\023\072\024\202" +
    "\027\113\043\201\045\112\046\105\055\114\001\001\000" +
    "\016\047\157\050\162\051\156\052\160\053\161\054\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\023" +
    "\072\024\205\027\113\043\201\045\112\046\105\055\114" +
    "\001\001\000\002\001\001\000\016\047\157\050\162\051" +
    "\156\052\160\053\161\054\163\001\001\000\002\001\001" +
    "\000\016\047\157\050\162\051\156\052\160\053\161\054" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\023\072\024\216\027\113\043\201\045" +
    "\112\046\105\055\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\023\072\027\113\035" +
    "\223\043\073\045\112\046\105\055\114\001\001\000\020" +
    "\023\072\027\113\035\222\043\073\045\112\046\105\055" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\023\072\027\113\043" +
    "\234\045\112\046\105\055\114\001\001\000\016\023\072" +
    "\027\113\043\230\045\112\046\105\055\114\001\001\000" +
    "\016\047\157\050\162\051\156\052\160\053\161\054\163" +
    "\001\001\000\002\001\001\000\016\023\072\027\113\043" +
    "\233\045\112\046\105\055\114\001\001\000\016\047\157" +
    "\050\162\051\156\052\160\053\161\054\163\001\001\000" +
    "\016\047\157\050\162\051\156\052\160\053\161\054\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\023\072\027\113\043\243\045\112\046\105\055\114\001" +
    "\001\000\016\047\157\050\162\051\156\052\160\053\161" +
    "\054\163\001\001\000\012\021\250\025\246\042\253\046" +
    "\245\001\001\000\002\001\001\000\064\003\274\004\273" +
    "\006\062\007\011\010\027\011\006\012\060\013\024\016" +
    "\033\017\015\020\007\022\004\026\070\027\053\030\050" +
    "\031\005\032\022\033\057\034\041\036\017\037\054\040" +
    "\032\041\010\042\276\046\042\001\001\000\004\042\272" +
    "\001\001\000\002\001\001\000\006\021\261\046\245\001" +
    "\001\000\006\021\254\046\245\001\001\000\002\001\001" +
    "\000\004\042\260\001\001\000\004\042\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\263\001\001\000\002\001\001\000" +
    "\004\042\265\001\001\000\002\001\001\000\006\021\267" +
    "\046\245\001\001\000\004\042\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\301\001\001\000\004\042\300\001\001\000" +
    "\064\003\274\004\277\006\062\007\011\010\027\011\006" +
    "\012\060\013\024\016\033\017\015\020\007\022\004\026" +
    "\070\027\053\030\050\031\005\032\022\033\057\034\041" +
    "\036\017\037\054\040\032\041\010\042\276\046\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\003\274" +
    "\004\302\006\062\007\011\010\027\011\006\012\060\013" +
    "\024\016\033\017\015\020\007\022\004\026\070\027\053" +
    "\030\050\031\005\032\022\033\057\034\041\036\017\037" +
    "\054\040\032\041\010\042\276\046\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\305\046\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\003\030" +
    "\005\310\006\062\007\011\010\027\011\006\012\060\013" +
    "\024\016\033\017\015\020\007\022\004\026\070\027\053" +
    "\030\050\031\005\032\022\033\057\034\041\036\017\037" +
    "\054\040\032\041\010\042\037\046\042\001\001\000\002" +
    "\001\001\000\020\042\312\047\157\050\162\051\156\052" +
    "\160\053\161\054\163\001\001\000\064\003\030\005\313" +
    "\006\062\007\011\010\027\011\006\012\060\013\024\016" +
    "\033\017\015\020\007\022\004\026\070\027\053\030\050" +
    "\031\005\032\022\033\057\034\041\036\017\037\054\040" +
    "\032\041\010\042\037\046\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\023\072\027" +
    "\113\043\327\045\112\046\105\055\114\001\001\000\016" +
    "\023\072\027\113\043\325\045\112\046\105\055\114\001" +
    "\001\000\002\001\001\000\006\021\322\046\245\001\001" +
    "\000\002\001\001\000\006\021\324\046\245\001\001\000" +
    "\002\001\001\000\016\047\157\050\162\051\156\052\160" +
    "\053\161\054\163\001\001\000\002\001\001\000\016\047" +
    "\157\050\162\051\156\052\160\053\161\054\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\047\157\050" +
    "\162\051\156\052\160\053\161\054\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\023\072\027\113\043" +
    "\336\045\112\046\105\055\114\001\001\000\016\047\157" +
    "\050\162\051\156\052\160\053\161\054\163\001\001\000" +
    "\002\001\001\000\016\047\157\050\162\051\156\052\160" +
    "\053\161\054\163\001\001\000\064\003\030\005\342\006" +
    "\062\007\011\010\027\011\006\012\060\013\024\016\033" +
    "\017\015\020\007\022\004\026\070\027\053\030\050\031" +
    "\005\032\022\033\057\034\041\036\017\037\054\040\032" +
    "\041\010\042\037\046\042\001\001\000\004\014\347\001" +
    "\001\000\016\023\072\027\113\043\354\045\112\046\105" +
    "\055\114\001\001\000\002\001\001\000\064\003\030\005" +
    "\350\006\062\007\011\010\027\011\006\012\060\013\024" +
    "\016\033\017\015\020\007\022\004\026\070\027\053\030" +
    "\050\031\005\032\022\033\057\034\041\036\017\037\054" +
    "\040\032\041\010\042\037\046\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\047\157\050" +
    "\162\051\156\052\160\053\161\054\163\001\001\000\064" +
    "\003\030\005\356\006\062\007\011\010\027\011\006\012" +
    "\060\013\024\016\033\017\015\020\007\022\004\026\070" +
    "\027\053\030\050\031\005\032\022\033\057\034\041\036" +
    "\017\037\054\040\032\041\010\042\037\046\042\001\001" +
    "\000\004\014\357\001\001\000\002\001\001\000\064\003" +
    "\030\005\361\006\062\007\011\010\027\011\006\012\060" +
    "\013\024\016\033\017\015\020\007\022\004\026\070\027" +
    "\053\030\050\031\005\032\022\033\057\034\041\036\017" +
    "\037\054\040\032\041\010\042\037\046\042\001\001\000" +
    "\002\001\001\000\020\042\363\047\157\050\162\051\156" +
    "\052\160\053\161\054\163\001\001\000\004\015\366\001" +
    "\001\000\004\042\376\001\001\000\004\042\375\001\001" +
    "\000\002\001\001\000\004\045\370\001\001\000\004\042" +
    "\371\001\001\000\064\003\030\005\372\006\062\007\011" +
    "\010\027\011\006\012\060\013\024\016\033\017\015\020" +
    "\007\022\004\026\070\027\053\030\050\031\005\032\022" +
    "\033\057\034\041\036\017\037\054\040\032\041\010\042" +
    "\037\046\042\001\001\000\004\015\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\003" +
    "\030\005\377\006\062\007\011\010\027\011\006\012\060" +
    "\013\024\016\033\017\015\020\007\022\004\026\070\027" +
    "\053\030\050\031\005\032\022\033\057\034\041\036\017" +
    "\037\054\040\032\041\010\042\037\046\042\001\001\000" +
    "\004\015\u0100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\023\072\027\113\043\u0106\045\112\046\105\055\114" +
    "\001\001\000\016\047\157\050\162\051\156\052\160\053" +
    "\161\054\163\001\001\000\002\001\001\000\006\021\u010d" +
    "\046\245\001\001\000\020\023\072\024\u010a\027\113\043" +
    "\201\045\112\046\105\055\114\001\001\000\002\001\001" +
    "\000\006\021\u010c\046\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\u0111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\u0118\001\001\000\004\042\u011a\001" +
    "\001\000\004\044\u011d\001\001\000\064\003\030\005\u011b" +
    "\006\062\007\011\010\027\011\006\012\060\013\024\016" +
    "\033\017\015\020\007\022\004\026\070\027\053\030\050" +
    "\031\005\032\022\033\057\034\041\036\017\037\054\040" +
    "\032\041\010\042\037\046\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\u011e\001\001\000\064\003" +
    "\030\005\u011f\006\062\007\011\010\027\011\006\012\060" +
    "\013\024\016\033\017\015\020\007\022\004\026\070\027" +
    "\053\030\050\031\005\032\022\033\057\034\041\036\017" +
    "\037\054\040\032\041\010\042\037\046\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\003\030\005\u0122" +
    "\006\062\007\011\010\027\011\006\012\060\013\024\016" +
    "\033\017\015\020\007\022\004\026\070\027\053\030\050" +
    "\031\005\032\022\033\057\034\041\036\017\037\054\040" +
    "\032\041\010\042\037\046\042\001\001\000\002\001\001" +
    "\000\016\023\072\027\113\043\u0124\045\112\046\105\055" +
    "\114\001\001\000\016\047\157\050\162\051\156\052\160" +
    "\053\161\054\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\u012a\046\245\001\001\000\006\021\u0129" +
    "\046\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        report_error("Error Sintactico: Ln " + (s.left + 1) +
            ", Col " + (s.right+1) + ". Simbolo " + sym.terminalNames[s.sym] + ((s.value==null)?"":": "+s.value) +"\n", null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        report_fatal_error("Error Sintactico Fatal: " + s + "\n", null);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    Node AbstractTree;

    int nodeid=0;

    void BuildAstAsDot(Node n){
        StringBuilder sb = new StringBuilder();
        sb.append("digraph AST {\n");
        sb.append(NodeToDot(n,"program"));
        sb.append("}");
        try (PrintWriter out = new PrintWriter("ast.dot")) {
            out.println(sb.toString());
        }catch(Exception e){
            System.out.println("Error al escribir AST a archivo.");
        }
    }

    String NodeToDot(Node n, String parent){
        if(n!=null){
            String dotid = "node" + nodeid;
            nodeid++;
            StringBuilder sb = new StringBuilder();
            Node[] childNodes = n.getChildren();
            sb.append(dotid + " [label=\"" + n.desc + "\"];\n");
            sb.append(parent + " -> " + dotid + ";\n");
            if(childNodes!=null){
                /* for(Node c : childNodes){
                    sb.append(NodeToDot(c,dotid));
                } */
                for(int i=0; i<childNodes.length; i++){
                    sb.append(NodeToDot(childNodes[i],dotid));
                }
            }
            return sb.toString();
        }
        return "";
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= ex_stmnt_list 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		BuildAstAsDot(l);l.semanticTest(new Scope(),new VarTable());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmnt_list ::= stmnt sep stmnt_list 
            {
              StmntList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StmntList(s.line,s.col,s,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmnt_list ::= sep stmnt_list 
            {
              StmntList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmnt_list ::= stmnt sep 
            {
              StmntList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new StmntList(s.line,s.col,s,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmnt_list ::= error sep 
            {
              StmntList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ex_stmnt_list ::= stmnt sep ex_stmnt_list 
            {
              StmntList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StmntList(s.line,s.col,s,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex_stmnt_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ex_stmnt_list ::= END sep ex_stmnt_list 
            {
              StmntList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StmntList(sleft,sright,new SimpleStmnt(sleft,sright,sym.END),l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex_stmnt_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ex_stmnt_list ::= sep ex_stmnt_list 
            {
              StmntList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex_stmnt_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ex_stmnt_list ::= stmnt sep 
            {
              StmntList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new StmntList(s.line,s.col,s,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex_stmnt_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ex_stmnt_list ::= END sep 
            {
              StmntList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new StmntList(sleft,sright,new SimpleStmnt(sleft,sright,sym.END),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex_stmnt_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmnt ::= declaration 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmnt ::= asig 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmnt ::= conditional 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmnt ::= loop 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmnt ::= goto_stmnt 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmnt ::= def_stmnt 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmnt ::= increment_stmnt 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmnt ::= swap_stmnt 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmnt ::= print_stmnt 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmnt ::= input_stmnt 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmnt ::= call_stmnt 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmnt ::= func_call 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmnt ::= return_stmnt 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmnt ::= LABEL 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LabelStmnt(sleft,sright,s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmnt ::= BREAK 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SimpleStmnt(sleft,sright,sym.BREAK);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmnt ::= CONTINUE 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SimpleStmnt(sleft,sright,sym.CONTINUE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sep ::= LINEEND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sep",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sep ::= COLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sep",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration ::= VAR id 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DecStmnt(sleft,sright,i,null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration ::= DIM id 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DecStmnt(sleft,sright,i,null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration ::= VAR id LBRACK expr RBRACK 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DecStmnt(sleft,sright,i,e,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaration ::= DIM id LBRACK expr RBRACK 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DecStmnt(sleft,sright,i,e,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaration ::= VAR asig 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt a = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DecStmnt(sleft,sright,((AssignStmnt)a).id,((AssignStmnt)a).arrPos,((AssignStmnt)a).asig);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaration ::= DIM asig 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt a = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DecStmnt(sleft,sright,((AssignStmnt)a).id,((AssignStmnt)a).arrPos,((AssignStmnt)a).asig);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asig ::= id EQ expr 
            {
              Stmnt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignStmnt(i.line,i.col,i,null,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asig ::= id LBRACK expr RBRACK EQ expr 
            {
              Stmnt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignStmnt(i.line,i.col,i,p,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // conditional ::= if_stmnt 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // conditional ::= on_stmnt 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if_stmnt ::= IF expr THEN ex_stmnt_list if_2 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmntList f = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfStmnt(sleft,sright,e,l,f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmnt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if_2 ::= ELSEIF expr THEN ex_stmnt_list if_2 
            {
              StmntList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmntList f = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StmntList(sleft,sright,new IfStmnt(sleft,sright,e,l,f),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if_2 ::= ELSE ex_stmnt_list ENDIF 
            {
              StmntList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if_2 ::= ENDIF 
            {
              StmntList RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if_2 ::= error THEN 
            {
              StmntList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if_2 ::= error ENDIF 
            {
              StmntList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // on_stmnt ::= ON expr sep case_list WON 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CaseList l = (CaseList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new OnStmnt(sleft,sright,e,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("on_stmnt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // case_list ::= CASE literal sep ex_stmnt_list case_list 
            {
              CaseList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LiteralExpr e = (LiteralExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseList c = (CaseList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CaseList(sleft,sright,new Case(sleft,sright,e,l),c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // case_list ::= DEFAULT sep ex_stmnt_list case_list 
            {
              CaseList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseList c = (CaseList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CaseList(sleft,sright,new Case(sleft,sright,null,l),c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // case_list ::= CASE literal sep ex_stmnt_list 
            {
              CaseList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LiteralExpr e = (LiteralExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CaseList(sleft,sright,new Case(sleft,sright,e,l),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // case_list ::= DEFAULT sep ex_stmnt_list 
            {
              CaseList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CaseList(sleft,sright,new Case(sleft,sright,null,l),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // case_list ::= error sep 
            {
              CaseList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // loop ::= for_stmnt 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // loop ::= while_stmnt 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // loop ::= repeat_stmnt 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // for_stmnt ::= FOR id EQ numeric TO numeric sep ex_stmnt_list NEXT 
            {
              Stmnt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr n = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr m = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ForStmnt(ssleft,ssright,i,n,m,new LiteralExpr<Integer>(-1,-1,new Integer(1),sym.IDENTIFIER_INTEGER),l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmnt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // for_stmnt ::= FOR id EQ numeric TO numeric STEP numeric sep ex_stmnt_list NEXT 
            {
              Stmnt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expr n = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr m = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ForStmnt(ssleft,ssright,i,n,m,s,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmnt",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // while_stmnt ::= WHILE expr sep ex_stmnt_list WEND 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new WhileStmnt(sleft,sright,e,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmnt",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // repeat_stmnt ::= REPEAT sep ex_stmnt_list UNTIL expr 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new RepeatStmnt(sleft,sright,e,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmnt",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // goto_stmnt ::= GOTO LABEL 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new GotoStmnt(sleft,sright,l,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goto_stmnt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // goto_stmnt ::= GOSUB LABEL 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new GotoStmnt(sleft,sright,l,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goto_stmnt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // def_stmnt ::= DEF id def_params stmnt_list END 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DefParam p = (DefParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmntList l = (StmntList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DefStmnt(sleft,sright,i.name,p.args,p.ret,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_stmnt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // def_params ::= LPAREN var_list RPAREN sep 
            {
              DefParam RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarList l = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DefParam(l,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_params",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // def_params ::= LPAREN RPAREN sep 
            {
              DefParam RESULT =null;
		RESULT = new DefParam(null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_params",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // def_params ::= var_list OUT var_list sep 
            {
              DefParam RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarList l = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarList r = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DefParam(l,r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_params",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // def_params ::= OUT var_list sep 
            {
              DefParam RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarList r = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DefParam(null,r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_params",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // def_params ::= sep 
            {
              DefParam RESULT =null;
		RESULT = new DefParam(null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_params",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // def_params ::= error RPAREN 
            {
              DefParam RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_params",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // def_params ::= error sep 
            {
              DefParam RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("def_params",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // return_stmnt ::= RETURN expr 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new RetStmnt(sleft,sright,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmnt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // return_stmnt ::= RETURN 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new RetStmnt(sleft,sright,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmnt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // call_stmnt ::= CALL STRING 
            {
              Stmnt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CallStmnt(ssleft,ssright,s,null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmnt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // call_stmnt ::= CALL STRING COMMA expr_list 
            {
              Stmnt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprList p = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CallStmnt(ssleft,ssright,s,p,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmnt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // call_stmnt ::= CALL STRING OUT var_list 
            {
              Stmnt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarList r = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CallStmnt(ssleft,ssright,s,null,r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmnt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // call_stmnt ::= CALL STRING COMMA expr_list OUT var_list 
            {
              Stmnt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprList p = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarList r = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CallStmnt(ssleft,ssright,s,p,r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmnt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ret_call_stmnt ::= CALL LPAREN STRING RPAREN 
            {
              Stmnt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CallStmnt(ssleft,ssright,s,null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret_call_stmnt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ret_call_stmnt ::= CALL LPAREN STRING COMMA expr_list RPAREN 
            {
              Stmnt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprList l = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CallStmnt(ssleft,ssright,s,l,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret_call_stmnt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ret_call_stmnt ::= error COMMA 
            {
              Stmnt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret_call_stmnt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ret_call_stmnt ::= error sep 
            {
              Stmnt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ret_call_stmnt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // func_call ::= simp_func_call 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // func_call ::= multi_func_call 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // func_call ::= method_call 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // simp_func_call ::= id LPAREN expr COMMA expr_list RPAREN 
            {
              Stmnt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprList l = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CallStmnt(i.line,i.col,i.name,new ExprList(e.line,e.col,e,l),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simp_func_call",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simp_func_call ::= id LPAREN expr RPAREN 
            {
              Stmnt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CallStmnt(i.line,i.col,i.name,new ExprList(e.line,e.col,e,null),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simp_func_call",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simp_func_call ::= id LPAREN RPAREN 
            {
              Stmnt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new CallStmnt(i.line,i.col,i.name,null,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simp_func_call",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // multi_func_call ::= id expr_list OUT var_list 
            {
              Stmnt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprList p = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarList r = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CallStmnt(i.line,i.col,i.name,p,r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_func_call",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // multi_func_call ::= id OUT var_list 
            {
              Stmnt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarList r = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CallStmnt(i.line,i.col,i.name,null,r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_func_call",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // method_call ::= id 
            {
              Stmnt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CallStmnt(i.line,i.col,i.name, null, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // var_list ::= id COMMA var_list 
            {
              VarList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarList l = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new VarList(i.line,i.col,i,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // var_list ::= id 
            {
              VarList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new VarList(i.line,i.col,i,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // var_list ::= error COMMA 
            {
              VarList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // var_list ::= error sep 
            {
              VarList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr_list ::= expr COMMA expr_list 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprList l = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprList(e.line,e.col,e,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr_list ::= expr 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprList(e.line,e.col,e,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // increment_stmnt ::= INC id 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignStmnt(sleft,sright,i,null,new BinExpr(i.line,i.col,i,new LiteralExpr<Integer>(-1,-1,new Integer(1),sym.IDENTIFIER_INTEGER),sym.PLUS));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increment_stmnt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // increment_stmnt ::= INC id COMMA expr 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignStmnt(sleft,sright,i,null,new BinExpr(i.line,i.col,i,e,sym.PLUS));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increment_stmnt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // increment_stmnt ::= DEC id 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignStmnt(sleft,sright,i,null,new BinExpr(i.line,i.col,i,new LiteralExpr<Integer>(-1,-1,new Integer(1),sym.IDENTIFIER_INTEGER),sym.MINUS));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increment_stmnt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // increment_stmnt ::= DEC id COMMA expr 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdExpr i = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignStmnt(sleft,sright,i,null,new BinExpr(i.line,i.col,i,e,sym.MINUS));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("increment_stmnt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // swap_stmnt ::= SWAP id COMMA id 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdExpr i1 = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdExpr i2 = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SwapStmnt(sleft,sright,i1, i2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("swap_stmnt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // print_stmnt ::= PRINT print_list 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprList l = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new PrintStmnt(sleft,sright,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmnt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // print_stmnt ::= QUESTION print_list 
            {
              Stmnt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprList l = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new PrintStmnt(sleft,sright,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmnt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // print_list ::= expr COMMA print_list 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprList l = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprList(e.line,e.col,e,new ExprList(sleft,sright,new LiteralExpr<String>(-1,-1,"  ",sym.IDENTIFIER_STRING),l));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // print_list ::= expr SEMICOLON print_list 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprList l = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprList(e.line,e.col,e,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // print_list ::= expr 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprList(e.line,e.col,e,new ExprList(-1,-1,new LiteralExpr<String>(-1,-1,"\n",sym.IDENTIFIER_STRING),null));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // print_list ::= COMMA 
            {
              ExprList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprList(sleft,sright,new LiteralExpr<String>(-1,-1,"  \n",sym.IDENTIFIER_STRING),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // print_list ::= SEMICOLON 
            {
              ExprList RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // print_list ::= error SEMICOLON 
            {
              ExprList RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // input_stmnt ::= INPUT STRING SEMICOLON var_list 
            {
              Stmnt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarList l = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InputStmnt(ssleft,ssright,s+"?",l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_stmnt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // input_stmnt ::= INPUT STRING COMMA var_list 
            {
              Stmnt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarList l = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InputStmnt(ssleft,ssright,s,l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_stmnt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // input_stmnt ::= INPUT var_list 
            {
              Stmnt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarList l = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InputStmnt(ssleft,ssright,"",l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_stmnt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // input_stmnt ::= LINPUT STRING SEMICOLON IDENTIFIER_STRING 
            {
              Stmnt RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new InputStmnt(ssleft,ssright,s,new VarList(ileft,iright,new IdExpr(ileft,iright,sym.IDENTIFIER_STRING,i),null));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_stmnt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr ::= expr bin_logic_op expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinExpr(e1.line,e1.col,e1,e2,o.intValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr ::= expr bin_bit_op expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinExpr(e1.line,e1.col,e1,e2,o.intValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr ::= expr bin_relation_op expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinExpr(e1.line,e1.col,e1,e2,o.intValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr ::= expr bit_shift expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinExpr(e1.line,e1.col,e1,e2,o.intValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr ::= expr math_op_sum expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinExpr(e1.line,e1.col,e1,e2,o.intValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr ::= expr math_op_mult expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BinExpr(e1.line,e1.col,e1,e2,o.intValue());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr ::= unary_op expr 
            {
              Expr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnExpr(e.line,e.col,e,o.intValue());/*TODO The op's pos is lost :/ Using expr pos*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr ::= literal 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LiteralExpr e = (LiteralExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr ::= id 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdExpr e = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr ::= id LBRACK expr RBRACK 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdExpr e = (IdExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr ::= simp_func_call 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CallExpr(s.line,s.col,((CallStmnt)s).name,((CallStmnt)s).parameters);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr ::= ret_call_stmnt 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmnt s = (Stmnt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CallExpr(s.line,s.col,((CallStmnt)s).name,((CallStmnt)s).parameters);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr ::= error bin_logic_op 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr ::= error bin_bit_op 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr ::= error bin_relation_op 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr ::= error bit_shift 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr ::= error math_op_sum 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr ::= error math_op_mult 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr ::= error LPAREN 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr ::= error RPAREN 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr ::= error LBRACK 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr ::= error RBRACK 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // unary_op ::= MINUS 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.MINUS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // unary_op ::= NOT 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.NOT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // unary_op ::= BIT_NOT 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.BIT_NOT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // math_op_mult ::= MULT 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.MULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op_mult",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // math_op_mult ::= DIV 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.DIV);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op_mult",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // math_op_mult ::= MOD 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.MOD);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op_mult",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // math_op_mult ::= INTEGER_DIV 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.INTEGER_DIV);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op_mult",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // math_op_sum ::= PLUS 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.PLUS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op_sum",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // math_op_sum ::= MINUS 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.MINUS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_op_sum",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // bit_shift ::= LSHIFT 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.LSHIFT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bit_shift",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // bit_shift ::= RSHIFT 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.RSHIFT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bit_shift",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // bin_relation_op ::= EQEQ 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.EQEQ);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_relation_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // bin_relation_op ::= NOTEQ 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.NOTEQ);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_relation_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // bin_relation_op ::= LT 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.LT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_relation_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // bin_relation_op ::= LTEQ 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.LTEQ);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_relation_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // bin_relation_op ::= GT 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.GT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_relation_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // bin_relation_op ::= GTEQ 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.GTEQ);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_relation_op",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // bin_bit_op ::= BIT_AND 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.BIT_AND);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_bit_op",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // bin_bit_op ::= BIT_OR 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.BIT_OR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_bit_op",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // bin_bit_op ::= BIT_XOR 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.BIT_XOR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_bit_op",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // bin_logic_op ::= ANDAND 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.ANDAND);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_logic_op",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // bin_logic_op ::= OROR 
            {
              Integer RESULT =null;
		RESULT = new Integer(sym.OROR);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_logic_op",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // literal ::= NUMBER 
            {
              LiteralExpr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralExpr<Integer>(nleft,nright,Integer.parseInt(n),sym.IDENTIFIER_INTEGER);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // literal ::= DECIMAL 
            {
              LiteralExpr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralExpr<Double>(nleft,nright,Double.parseDouble(n),sym.IDENTIFIER_DECIMAL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // literal ::= STRING 
            {
              LiteralExpr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralExpr<String>(nleft,nright,n,sym.IDENTIFIER_STRING);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // literal ::= TRUE 
            {
              LiteralExpr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralExpr<Integer>(sleft,sright,new Integer(1),sym.IDENTIFIER_INTEGER);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // literal ::= FALSE 
            {
              LiteralExpr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralExpr<Integer>(sleft,sright,new Integer(0),sym.IDENTIFIER_INTEGER);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // numeric ::= IDENTIFIER_INTEGER 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdExpr(ileft,iright,sym.IDENTIFIER_INTEGER, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // numeric ::= IDENTIFIER_DECIMAL 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdExpr(ileft,iright,sym.IDENTIFIER_DECIMAL, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // numeric ::= NUMBER 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralExpr<Integer>(nleft,nright,Integer.parseInt(n),sym.IDENTIFIER_INTEGER);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // numeric ::= DECIMAL 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralExpr<Double>(nleft,nright,Double.parseDouble(n),sym.IDENTIFIER_DECIMAL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // numeric ::= TRUE 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralExpr<Integer>(sleft,sright,new Integer(1),sym.IDENTIFIER_INTEGER);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // numeric ::= FALSE 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LiteralExpr<Integer>(sleft,sright,new Integer(0),sym.IDENTIFIER_INTEGER);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numeric",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // id ::= IDENTIFIER_INTEGER 
            {
              IdExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdExpr(ileft,iright,sym.IDENTIFIER_INTEGER, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // id ::= IDENTIFIER_DECIMAL 
            {
              IdExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdExpr(ileft,iright,sym.IDENTIFIER_DECIMAL, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // id ::= IDENTIFIER_STRING 
            {
              IdExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdExpr(ileft,iright,sym.IDENTIFIER_STRING, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
