/*
    SmileBASIC Syntax Analyzer by StrScr
    To be used with CUP.

    TODO:
        Initialization should be split in AST into declaration and assignment. Initialization should only be supported for arrays.
        Check other TODOs throughout code
        Allow for multidimensional arrays (Currently one-dimensional)
*/

import java.io.*;
import java_cup.runtime.*;

action code
{:
    Node AbstractTree;

    int nodeid=0;

    void BuildAstAsDot(Node n){
        StringBuilder sb = new StringBuilder();
        sb.append("digraph AST {\n");
        sb.append(NodeToDot(n,"program"));
        sb.append("}");
        try (PrintWriter out = new PrintWriter("ast.dot")) {
            out.println(sb.toString());
        }catch(Exception e){
            System.out.println("Error al escribir AST a archivo.");
        }
    }

    String NodeToDot(Node n, String parent){
        if(n!=null){
            String dotid = "node" + nodeid;
            nodeid++;
            StringBuilder sb = new StringBuilder();
            Node[] childNodes = n.getChildren();
            sb.append(dotid + " [label=\"" + n.desc + "\"];\n");
            sb.append(parent + " -> " + dotid + ";\n");
            if(childNodes!=null){
                /* for(Node c : childNodes){
                    sb.append(NodeToDot(c,dotid));
                } */
                for(int i=0; i<childNodes.length; i++){
                    sb.append(NodeToDot(childNodes[i],dotid));
                }
            }
            return sb.toString();
        }
        return "";
    }
:}

parser code
{:
    public void syntax_error(Symbol s){
        report_error("Error Sintactico: Ln " + (s.left + 1) +
            ", Col " + (s.right+1) + ". Simbolo " + sym.terminalNames[s.sym] + ((s.value==null)?"":": "+s.value) +"\n", null);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        report_fatal_error("Error Sintactico Fatal: " + s + "\n", null);
    }

:}

terminal IF, THEN, ELSE, ELSEIF, ENDIF;
terminal ON, CASE, DEFAULT, WON;

terminal FOR, TO, STEP, NEXT;
terminal WHILE, WEND;
terminal REPEAT, UNTIL;
terminal CONTINUE, BREAK;

//terminal STOP;

terminal GOTO, GOSUB;

terminal DEF, CALL, RETURN, OUT, END;
//terminal COMMON;

terminal VAR, DIM;
terminal INC, DEC, SWAP;

terminal PRINT, QUESTION;

terminal INPUT, LINPUT;

//terminal READ, DATA, RESTORE;

//terminal EXEC, USE;

terminal TRUE, FALSE;

terminal LPAREN, RPAREN;
terminal LBRACK, RBRACK;
terminal COMMA, SEMICOLON;

terminal EQ;
terminal EQEQ, NOTEQ, LT, LTEQ, GT, GTEQ;

terminal NOT, ANDAND, OROR;

terminal PLUS, MINUS;
terminal MULT, DIV, MOD, INTEGER_DIV;

terminal BIT_AND, BIT_OR, BIT_XOR, BIT_NOT;

terminal LSHIFT, RSHIFT;

terminal String NUMBER, DECIMAL;//Must convert later
terminal String STRING;

terminal String IDENTIFIER_STRING, IDENTIFIER_DECIMAL, IDENTIFIER_INTEGER;
terminal String LABEL;

terminal LINEEND, COLON;

// Used for precedence only
terminal UMINUS;

/* Non Terminals */
/*  Shortening Map
    stmnt -> Statement
    expr -> Expression
    op -> Operator
    bin -> Binary
    sep -> Separator
    func -> Function
    opt -> Optional
*/

//Statements
//TODO: Reorganize this section a bit
non terminal program;
non terminal Stmnt stmnt;
non terminal StmntList stmnt_list, ex_stmnt_list;
non terminal Stmnt declaration, asig;
non terminal Stmnt conditional, loop;
non terminal Stmnt if_stmnt, on_stmnt;
non terminal StmntList if_2;
non terminal CaseList case_list;
non terminal Stmnt goto_stmnt;
non terminal Stmnt def_stmnt, return_stmnt;
non terminal VarList var_list;
non terminal Stmnt call_stmnt, ret_call_stmnt;
non terminal ExprList expr_list;
non terminal DefParam def_params;
non terminal Stmnt func_call;
non terminal Stmnt simp_func_call, multi_func_call, method_call;
non terminal Stmnt increment_stmnt, swap_stmnt;
non terminal Stmnt print_stmnt;
non terminal ExprList print_list;
non terminal Stmnt input_stmnt;
non terminal Stmnt for_stmnt, while_stmnt, repeat_stmnt;
non terminal sep;
//LATER TODO: read, data, restore, exec, use
//Expressions
non terminal Expr expr, numeric;
non terminal LiteralExpr literal;
non terminal IdExpr id;
non terminal Integer math_op_mult, math_op_sum;
non terminal Integer bin_relation_op, bin_bit_op, bin_logic_op, bit_shift;
non terminal Integer unary_op;

/* Precedence */
precedence left ANDAND, OROR;
precedence left BIT_AND, BIT_OR, BIT_XOR;
precedence left EQEQ, NOTEQ, LT, LTEQ, GT, GTEQ;
precedence left LSHIFT, RSHIFT;
precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD, INTEGER_DIV;
precedence left UMINUS, NOT, BIT_NOT;

/* Grammar */

start with program;

/* program     ::= ex_stmnt_list:l     {:AbstractTree = l;:} */
program     ::= ex_stmnt_list:l     {:BuildAstAsDot(l);l.semanticTest(new Scope(),new VarTable());:}
            ;

stmnt_list  ::= stmnt:s sep stmnt_list:l    {:RESULT = new StmntList(s.line,s.col,s,l);:}
            |   sep stmnt_list:l            {:RESULT = l;:}
            |   stmnt:s sep                 {:RESULT = new StmntList(s.line,s.col,s,null);:}
            |   error sep
            ;
ex_stmnt_list   ::= stmnt:s sep ex_stmnt_list:l {:RESULT = new StmntList(s.line,s.col,s,l);:}
                |   END:s sep ex_stmnt_list:l   {:RESULT = new StmntList(sleft,sright,new SimpleStmnt(sleft,sright,sym.END),l);:}
                |   sep ex_stmnt_list:l         {:RESULT = l;:}
                |   stmnt:s sep                 {:RESULT = new StmntList(s.line,s.col,s,null);:}
                |   END:s sep                   {:RESULT = new StmntList(sleft,sright,new SimpleStmnt(sleft,sright,sym.END),null);:}
                ;
stmnt       ::= declaration:s       {:RESULT = s;:}
            |   asig:s              {:RESULT = s;:}
            |   conditional:s       {:RESULT = s;:}
            |   loop:s              {:RESULT = s;:}
            |   goto_stmnt:s        {:RESULT = s;:}
            |   def_stmnt:s         {:RESULT = s;:}
            |   increment_stmnt:s   {:RESULT = s;:}
            |   swap_stmnt:s        {:RESULT = s;:}
            |   print_stmnt:s       {:RESULT = s;:}
            |   input_stmnt:s       {:RESULT = s;:}
            |   call_stmnt:s        {:RESULT = s;:}
            |   func_call:s         {:RESULT = s;:}
            |   return_stmnt:s      {:RESULT = s;:}
            |   LABEL:s             {:RESULT = new LabelStmnt(sleft,sright,s);:}
            |   BREAK:s             {:RESULT = new SimpleStmnt(sleft,sright,sym.BREAK);:}
            |   CONTINUE:s          {:RESULT = new SimpleStmnt(sleft,sright,sym.CONTINUE);:}
            ;
sep         ::= LINEEND
            |   COLON
            ;

//Statements
declaration ::= VAR:s id:i                          {:RESULT = new DecStmnt(sleft,sright,i,null,null);:}
            |   DIM:s id:i                          {:RESULT = new DecStmnt(sleft,sright,i,null,null);:}
            |   VAR:s id:i LBRACK expr:e RBRACK     {:RESULT = new DecStmnt(sleft,sright,i,e,null);:}
            |   DIM:s id:i LBRACK expr:e RBRACK     {:RESULT = new DecStmnt(sleft,sright,i,e,null);:}
            |   VAR:s asig:a                        {:RESULT = new DecStmnt(sleft,sright,((AssignStmnt)a).id,((AssignStmnt)a).arrPos,((AssignStmnt)a).asig);:}
            |   DIM:s asig:a                        {:RESULT = new DecStmnt(sleft,sright,((AssignStmnt)a).id,((AssignStmnt)a).arrPos,((AssignStmnt)a).asig);:}
            ;//TODO: multiple declarations in one line, check if array/var/asig mix is possible

asig        ::= id:i EQ expr:e                      {:RESULT = new AssignStmnt(i.line,i.col,i,null,e);:}
            |   id:i LBRACK expr:p RBRACK EQ expr:e {:RESULT = new AssignStmnt(i.line,i.col,i,p,e);:}
            ;

conditional ::= if_stmnt:s  {:RESULT = s;:}
            |   on_stmnt:s  {:RESULT = s;:}
            ;
if_stmnt    ::= IF:s expr:e THEN ex_stmnt_list:l if_2:f     {:RESULT = new IfStmnt(sleft,sright,e,l,f);:}
            ;
if_2        ::= ELSEIF:s expr:e THEN ex_stmnt_list:l if_2:f {:RESULT = new StmntList(sleft,sright,new IfStmnt(sleft,sright,e,l,f),null);:}
            |   ELSE ex_stmnt_list:l ENDIF                  {:RESULT = l;:}
            |   ENDIF                                       {:RESULT = null;:}
            |   error THEN
            |   error ENDIF
            ;
on_stmnt    ::= ON:s expr:e sep case_list:l WON     {:RESULT = new OnStmnt(sleft,sright,e,l);:}
            ;
case_list   ::= CASE:s literal:e sep ex_stmnt_list:l case_list:c    {:RESULT = new CaseList(sleft,sright,new Case(sleft,sright,e,l),c);:}
            |   DEFAULT:s sep ex_stmnt_list:l case_list:c           {:RESULT = new CaseList(sleft,sright,new Case(sleft,sright,null,l),c);:}
            |   CASE:s literal:e sep ex_stmnt_list:l                {:RESULT = new CaseList(sleft,sright,new Case(sleft,sright,e,l),null);:}
            |   DEFAULT:s sep ex_stmnt_list:l                       {:RESULT = new CaseList(sleft,sright,new Case(sleft,sright,null,l),null);:}
            |   error sep
            ;

loop        ::= for_stmnt:s     {:RESULT = s;:}
            |   while_stmnt:s   {:RESULT = s;:}
            |   repeat_stmnt:s  {:RESULT = s;:}
            ;
for_stmnt   ::= FOR:ss id:i EQ numeric:n TO numeric:m sep ex_stmnt_list:l NEXT                  {:RESULT = new ForStmnt(ssleft,ssright,i,n,m,new LiteralExpr<Integer>(-1,-1,new Integer(1),sym.IDENTIFIER_INTEGER),l);:}
            |   FOR:ss id:i EQ numeric:n TO numeric:m STEP numeric:s sep ex_stmnt_list:l NEXT   {:RESULT = new ForStmnt(ssleft,ssright,i,n,m,s,l);:}
            ;//TODO: Check if any expr possible (strings). Check if asig obligatory
while_stmnt ::= WHILE:s expr:e sep ex_stmnt_list:l WEND     {:RESULT = new WhileStmnt(sleft,sright,e,l);:}
            ;
repeat_stmnt::= REPEAT:s sep ex_stmnt_list:l UNTIL expr:e   {:RESULT = new RepeatStmnt(sleft,sright,e,l);:}
            ;

goto_stmnt  ::= GOTO:s LABEL:l      {:RESULT = new GotoStmnt(sleft,sright,l,false);:}
            |   GOSUB:s LABEL:l     {:RESULT = new GotoStmnt(sleft,sright,l,true);:}
            ;

def_stmnt   ::= DEF:s id:i def_params:p stmnt_list:l END  {:RESULT = new DefStmnt(sleft,sright,i.name,p.args,p.ret,l);:}
            ;
def_params  ::= LPAREN var_list:l RPAREN sep    {:RESULT = new DefParam(l,null);:}
            |   LPAREN RPAREN sep               {:RESULT = new DefParam(null,null);:}
            |   var_list:l OUT var_list:r sep   {:RESULT = new DefParam(l,r);:}
            |   OUT var_list:r sep              {:RESULT = new DefParam(null,r);:}
            |   sep                             {:RESULT = new DefParam(null,null);:}
            |   error RPAREN
            |   error sep
            ;
return_stmnt::= RETURN:s expr:e     {:RESULT = new RetStmnt(sleft,sright,e);:}
            |   RETURN:s            {:RESULT = new RetStmnt(sleft,sright,null);:}
            ;

call_stmnt  ::= CALL:ss STRING:s                                    {:RESULT = new CallStmnt(ssleft,ssright,s,null,null);:}
            |   CALL:ss STRING:s COMMA expr_list:p                  {:RESULT = new CallStmnt(ssleft,ssright,s,p,null);:}
            |   CALL:ss STRING:s OUT var_list:r                     {:RESULT = new CallStmnt(ssleft,ssright,s,null,r);:}
            |   CALL:ss STRING:s COMMA expr_list:p OUT var_list:r   {:RESULT = new CallStmnt(ssleft,ssright,s,p,r);:}
            ;
ret_call_stmnt  ::= CALL:ss LPAREN STRING:s RPAREN                      {:RESULT = new CallStmnt(ssleft,ssright,s,null,null);:}
                |   CALL:ss LPAREN STRING:s COMMA expr_list:l RPAREN    {:RESULT = new CallStmnt(ssleft,ssright,s,l,null);:}
                |   error COMMA
                |   error sep
                ;

func_call   ::= simp_func_call:s    {:RESULT = s;:}
            |   multi_func_call:s   {:RESULT = s;:}
            |   method_call:s       {:RESULT = s;:}
            ;
simp_func_call  ::= id:i LPAREN expr:e COMMA expr_list:l RPAREN {:RESULT = new CallStmnt(i.line,i.col,i.name,new ExprList(e.line,e.col,e,l),null);:}
                |   id:i LPAREN expr:e RPAREN                   {:RESULT = new CallStmnt(i.line,i.col,i.name,new ExprList(e.line,e.col,e,null),null);:}
                |   id:i LPAREN RPAREN                          {:RESULT = new CallStmnt(i.line,i.col,i.name,null,null);:}
                ;//I have no idea why LPAREN expr_list RPAREN doesn't work, but this does.
multi_func_call ::= id:i expr_list:p OUT var_list:r {:RESULT = new CallStmnt(i.line,i.col,i.name,p,r);:}
                |   id:i OUT var_list:r             {:RESULT = new CallStmnt(i.line,i.col,i.name,null,r);:}
                ;
method_call ::= id:i    {:RESULT = new CallStmnt(i.line,i.col,i.name, null, null);:}
            ;//Hopefully won't cause trouble

var_list    ::= id:i COMMA var_list:l   {:RESULT = new VarList(i.line,i.col,i,l);:}
            |   id:i                    {:RESULT = new VarList(i.line,i.col,i,null);:}
            | error COMMA
            | error sep
            ;

expr_list   ::= expr:e COMMA expr_list:l    {:RESULT = new ExprList(e.line,e.col,e,l);:}
            |   expr:e                      {:RESULT = new ExprList(e.line,e.col,e,null);:}
            ;

increment_stmnt ::= INC:s id:i              {:RESULT = new AssignStmnt(sleft,sright,i,null,new BinExpr(i.line,i.col,i,new LiteralExpr<Integer>(-1,-1,new Integer(1),sym.IDENTIFIER_INTEGER),sym.PLUS));:}
                |   INC:s id:i COMMA expr:e {:RESULT = new AssignStmnt(sleft,sright,i,null,new BinExpr(i.line,i.col,i,e,sym.PLUS));:}
                |   DEC:s id:i              {:RESULT = new AssignStmnt(sleft,sright,i,null,new BinExpr(i.line,i.col,i,new LiteralExpr<Integer>(-1,-1,new Integer(1),sym.IDENTIFIER_INTEGER),sym.MINUS));:}
                |   DEC:s id:i COMMA expr:e {:RESULT = new AssignStmnt(sleft,sright,i,null,new BinExpr(i.line,i.col,i,e,sym.MINUS));:}
                ;

swap_stmnt  ::= SWAP:s id:i1 COMMA id:i2    {:RESULT = new SwapStmnt(sleft,sright,i1, i2);:}
            ;

print_stmnt ::= PRINT:s print_list:l        {:RESULT = new PrintStmnt(sleft,sright,l);:}
            |   QUESTION:s print_list:l     {:RESULT = new PrintStmnt(sleft,sright,l);:}
            ;
print_list  ::= expr:e COMMA:s print_list:l     {:RESULT = new ExprList(e.line,e.col,e,new ExprList(sleft,sright,new LiteralExpr<String>(-1,-1,"  ",sym.IDENTIFIER_STRING),l));:}
            |   expr:e SEMICOLON print_list:l   {:RESULT = new ExprList(e.line,e.col,e,l);:}
            |   expr:e                          {:RESULT = new ExprList(e.line,e.col,e,new ExprList(-1,-1,new LiteralExpr<String>(-1,-1,"\n",sym.IDENTIFIER_STRING),null));:}
            |   COMMA:s                         {:RESULT = new ExprList(sleft,sright,new LiteralExpr<String>(-1,-1,"  \n",sym.IDENTIFIER_STRING),null);:}
            |   SEMICOLON                       {:RESULT = null;:}
            |   error SEMICOLON
            ;

input_stmnt ::= INPUT:ss STRING:s SEMICOLON var_list:l             {:RESULT = new InputStmnt(ssleft,ssright,s+"?",l);:}
            |   INPUT:ss STRING:s COMMA var_list:l                 {:RESULT = new InputStmnt(ssleft,ssright,s,l);:}
            |   INPUT:ss var_list:l                                {:RESULT = new InputStmnt(ssleft,ssright,"",l);:}
            |   LINPUT:ss STRING:s SEMICOLON IDENTIFIER_STRING:i   {:RESULT = new InputStmnt(ssleft,ssright,s,new VarList(ileft,iright,new IdExpr(ileft,iright,sym.IDENTIFIER_STRING,i),null));:}
            ;

//Expressions
expr    ::= expr:e1 bin_logic_op:o expr:e2      {:RESULT = new BinExpr(e1.line,e1.col,e1,e2,o.intValue());:}
        |   expr:e1 bin_bit_op:o expr:e2        {:RESULT = new BinExpr(e1.line,e1.col,e1,e2,o.intValue());:}
        |   expr:e1 bin_relation_op:o expr:e2   {:RESULT = new BinExpr(e1.line,e1.col,e1,e2,o.intValue());:}
        |   expr:e1 bit_shift:o expr:e2         {:RESULT = new BinExpr(e1.line,e1.col,e1,e2,o.intValue());:}
        |   expr:e1 math_op_sum:o expr:e2       {:RESULT = new BinExpr(e1.line,e1.col,e1,e2,o.intValue());:}
        |   expr:e1 math_op_mult:o expr:e2      {:RESULT = new BinExpr(e1.line,e1.col,e1,e2,o.intValue());:}
        |   unary_op:o expr:e                   {:RESULT = new UnExpr(e.line,e.col,e,o.intValue());/*TODO The op's pos is lost :/ Using expr pos*/:}
        |   LPAREN expr:e RPAREN                {:RESULT = e;:}
        |   literal:e                           {:RESULT = e;:}
        |   id:e                                {:RESULT = e;:}
        |   id:e LBRACK expr:p RBRACK           {:RESULT = e;:}
        |   simp_func_call:s                    {:RESULT = new CallExpr(s.line,s.col,((CallStmnt)s).name,((CallStmnt)s).parameters);:}
        |   ret_call_stmnt:s                    {:RESULT = new CallExpr(s.line,s.col,((CallStmnt)s).name,((CallStmnt)s).parameters);:}
        |   error bin_logic_op
        |   error bin_bit_op
        |   error bin_relation_op
        |   error bit_shift
        |   error math_op_sum
        |   error math_op_mult
        |   error LPAREN
        |   error RPAREN
        |   error LBRACK
        |   error RBRACK
        ;

//Expression Terminal Groups
unary_op        ::= MINUS               {:RESULT = new Integer(sym.MINUS);:}
                    %prec UMINUS
                |   NOT                 {:RESULT = new Integer(sym.NOT);:}
                |   BIT_NOT             {:RESULT = new Integer(sym.BIT_NOT);:}
                ;
math_op_mult    ::= MULT        {:RESULT = new Integer(sym.MULT);:}
                |   DIV         {:RESULT = new Integer(sym.DIV);:}
                |   MOD         {:RESULT = new Integer(sym.MOD);:}
                |   INTEGER_DIV {:RESULT = new Integer(sym.INTEGER_DIV);:}
                ;
math_op_sum     ::= PLUS    {:RESULT = new Integer(sym.PLUS);:}
                |   MINUS   {:RESULT = new Integer(sym.MINUS);:}
                ;
bit_shift       ::= LSHIFT  {:RESULT = new Integer(sym.LSHIFT);:}
                |   RSHIFT  {:RESULT = new Integer(sym.RSHIFT);:}
                ;
bin_relation_op ::= EQEQ    {:RESULT = new Integer(sym.EQEQ);:}
                |   NOTEQ   {:RESULT = new Integer(sym.NOTEQ);:}
                |   LT      {:RESULT = new Integer(sym.LT);:}
                |   LTEQ    {:RESULT = new Integer(sym.LTEQ);:}
                |   GT      {:RESULT = new Integer(sym.GT);:}
                |   GTEQ    {:RESULT = new Integer(sym.GTEQ);:}
                ;
bin_bit_op      ::= BIT_AND {:RESULT = new Integer(sym.BIT_AND);:}
                |   BIT_OR  {:RESULT = new Integer(sym.BIT_OR);:}
                |   BIT_XOR {:RESULT = new Integer(sym.BIT_XOR);:}
                ;
bin_logic_op    ::= ANDAND  {:RESULT = new Integer(sym.ANDAND);:}
                |   OROR    {:RESULT = new Integer(sym.OROR);:}
                ;
literal     ::= NUMBER:n    {:RESULT = new LiteralExpr<Integer>(nleft,nright,Integer.parseInt(n),sym.IDENTIFIER_INTEGER);:}
            |   DECIMAL:n   {:RESULT = new LiteralExpr<Double>(nleft,nright,Double.parseDouble(n),sym.IDENTIFIER_DECIMAL);:}
            |   STRING:n    {:RESULT = new LiteralExpr<String>(nleft,nright,n,sym.IDENTIFIER_STRING);:}
            |   TRUE:s      {:RESULT = new LiteralExpr<Integer>(sleft,sright,new Integer(1),sym.IDENTIFIER_INTEGER);:}
            |   FALSE:s     {:RESULT = new LiteralExpr<Integer>(sleft,sright,new Integer(0),sym.IDENTIFIER_INTEGER);:}
            ;
numeric     ::= IDENTIFIER_INTEGER:i    {:RESULT = new IdExpr(ileft,iright,sym.IDENTIFIER_INTEGER, i);:}
            |   IDENTIFIER_DECIMAL:i    {:RESULT = new IdExpr(ileft,iright,sym.IDENTIFIER_DECIMAL, i);:}
            |   NUMBER:n                {:RESULT = new LiteralExpr<Integer>(nleft,nright,Integer.parseInt(n),sym.IDENTIFIER_INTEGER);:}
            |   DECIMAL:n               {:RESULT = new LiteralExpr<Double>(nleft,nright,Double.parseDouble(n),sym.IDENTIFIER_DECIMAL);:}
            |   TRUE:s                  {:RESULT = new LiteralExpr<Integer>(sleft,sright,new Integer(1),sym.IDENTIFIER_INTEGER);:}
            |   FALSE:s                 {:RESULT = new LiteralExpr<Integer>(sleft,sright,new Integer(0),sym.IDENTIFIER_INTEGER);:}
            ;
id          ::= IDENTIFIER_INTEGER:i    {:RESULT = new IdExpr(ileft,iright,sym.IDENTIFIER_INTEGER, i);:}
            |   IDENTIFIER_DECIMAL:i    {:RESULT = new IdExpr(ileft,iright,sym.IDENTIFIER_DECIMAL, i);:}
            |   IDENTIFIER_STRING:i     {:RESULT = new IdExpr(ileft,iright,sym.IDENTIFIER_STRING, i);:}
            ;
