/*
    SmileBASIC Syntax Analyzer by StrScr
    To be used with CUP.
*/

package JSmileBASIC;

import java.io.*;
import java_cup.runtime.*;

parser code
{:
    public void syntax_error(Symbol s){
        report_error("Error de sintaxis. Linea: " + (s.right + 1) +
            " Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        report_fatal_error("Fatal Error: " + s.value, null);
    }

:}

/* Terminals */

terminal IF, THEN, ELSE, ELSEIF, ENDIF;
terminal ON, CASE, DEFAULT, WON;

terminal FOR, TO, STEP, NEXT;
terminal WHILE, WEND;
terminal REPEAT, UNTIL;
terminal CONTINUE, BREAK;

terminal STOP;

terminal DEF, COMMON, CALL, RETURN, OUT, END;

terminal VAR, DIM;
terminal INC, DEC, SWAP;

terminal PRINT, QUESTION;

terminal INPUT, LINPUT;

terminal READ, DATA, RESTORE;

terminal EXEC, USE;

terminal TRUE, FALSE;

terminal LPAREN, RPAREN;
terminal LBRACK,RBRACK;
terminal COMMA, SEMICOLON;

terminal EQ;
terminal EQEQ, NOTEQ, LT, LTEQ, GT, GTEQ;

terminal NOT, ANDAND, OROR;

terminal PLUS, MINUS;
terminal MULT, DIV, MOD, INTEGER_DIV;

terminal BIT_AND, BIT_OR, BIT_XOR, BIT_NOT;

terminal LSHIFT, RSHIFT;

terminal NUMBER, DECIMAL;
terminal STRING_LITERAL;

terminal IDENTIFIER_STRING, IDENTIFIER_DECIMAL, IDENTIFIER_INTEGER;
terminal LABEL;

terminal LINEEND, COLON;

// Used for different precedence level
terminal UMINUS;

/* Non Terminals */
/*  Shortening Map
    stmnt -> Statement
    expr -> Expression
    op -> Operator
    bin -> Binary
    sep -> Separator
*/

non terminal stmnt_list, stmnt;
non terminal expr, literal, id;
non terminal math_op_mult, math_op_sum;
non terminal bin_relation_op, bin_bit_op, bin_logic_op, bit_shift, unary_op;
non terminal sep;
//Statements
non terminal declaration, asig;
non terminal conditional, loop;
non terminal if_stmnt, on_stmnt;
non terminal for_stmnt, while_stmnt, repeat_stmnt, stmnt_loop;

/* Precedence */

//TODO

/* Grammar */

start with stmnt_list;

stmt_list   ::= stmnt
            |   stmnt stmnt_sep stmnt_list
            ;
stmnt       ::= asig | conditional | loop | 
sep         ::= LINEEND | COLON;
literal     ::= NUMBER | DECIMAL | STRING_LITERAL | TRUE | FALSE;
id          ::= IDENTIFIER_INTEGER | IDENTIFIER_DECIMAL | IDENTIFIER_STRING;

//Statements
declaration ::= VAR id | DIM id
            |   VAR asig | DIM asig
            ;
asig        ::= id EQ expr
            |   id LBRACK expr RBRACK EQ expr
            ;

//Expression Terminal Groups
unary_op        ::= MINUS %prec UMINUS | NOT | BIT_NOT;
math_op_mult    ::= MULT | DIV | MOD | INTEGER_DIV;
math_op_sum     ::= PLUS | MINUS;
bit_shift       ::= LSHIFT | RSHIFT;
bin_relation_op ::= EQEQ | NOTEQ | LT | LTEQ | GT | GTEQ;
bin_bit_op      ::= BIT_AND | BIT_OR | BIT_XOR;
bin_logic_op    ::= ANDAND | OROR;
